<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yuan]]></title>
  <subtitle><![CDATA[一点一滴，技术积累]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://luoyuan800.github.io//"/>
  <updated>2017-02-09T06:11:33.328Z</updated>
  <id>http://luoyuan800.github.io//</id>
  
  <author>
    <name><![CDATA[Luo Yuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[斐波那契数列]]></title>
    <link href="http://luoyuan800.github.io/2017/02/09/fib/"/>
    <id>http://luoyuan800.github.io/2017/02/09/fib/</id>
    <published>2017-02-09T08:19:43.000Z</published>
    <updated>2017-02-09T06:11:33.328Z</updated>
    <content type="html"><![CDATA[<p>斐波那契数列是有一个传奇的数学家基于一对非常能生的兔子提出的（喜欢数学游戏的卖兔子的商人？）：一对兔子每个月能生出一对小兔子来。如果所有兔都不死，那么一年以后可以繁殖多少对兔子？每个月兔子数量最终构成了一个了一个神奇的数列，这数列中除了第零项和第一项，其他所有的项都等于前面两项之和：<code>F(n) = F(n-1) + F(n-2)</code><br><a id="more"></a></p>
<p>这里我先不讨论斐波拉契数列的各种事神奇的特性，比如它和黄金分割的关系，比如自然界的花瓣或者树叶或者数字与斐波拉契数列的巧合，比如晶体原子排列和斐波拉契数列的关联，比如研究股票的某些坑神尝试使用斐波拉契数列去探索跌涨规律等等。总之，看到斐波拉契数列你就会怀疑我们的世界是不是就是某个更高级的文明根据一堆奇奇怪怪数学原理来设计的呢……<br>在这里我就简单研究下怎么使用java实现计算斐波拉契数列的第N个数。<br>首先斐波拉契数列的特性就是一种递归的实现，所以我们可以简单的使用递归的方式求解它。代码结构优雅简洁：</p>
<pre><code>int calculateRecursion(int <span class="keyword">n</span>){
        <span class="keyword">if</span>(<span class="keyword">n</span> &lt; 2){
            <span class="keyword">return</span> <span class="keyword">n</span>;
        }
        <span class="keyword">return</span> calculateRecursion(<span class="keyword">n</span> -1) + calculateRecursion(<span class="keyword">n</span> -2);
}
</code></pre><p>但是递归算法终究是会导致资源的浪费和堆栈占用的暴增，但计算数值一旦变大，最终会导致堆栈溢出。并且这个递归算法中对同样的位数的斐波那契数进行了重复计算和存储也导致了计算资源的浪费。<br>代码结构简洁并不一定代码代码效率好，那么我们尝试把递归计算过程的数字保存下来，当发现已经计算过的就直接使用：</p>
<pre><code>Integer[] fibs = new Integer[<span class="keyword">n</span>+1];
int calculateRecursion(int <span class="keyword">n</span>){
    <span class="keyword">if</span>(fib[<span class="keyword">n</span>] == null &amp;&amp; <span class="keyword">n</span> &lt; 2){
        fibs[<span class="keyword">n</span>] = <span class="keyword">n</span>;
    }<span class="keyword">else</span> <span class="keyword">if</span>(fib[<span class="keyword">n</span>] == null){
        fibs[<span class="keyword">n</span>] = calculateRecursion(<span class="keyword">n</span> -1) + calculateRecursion(<span class="keyword">n</span> -2);
    }
    <span class="keyword">return</span> fibs[<span class="keyword">n</span>];
}
</code></pre><p>这样我们递归终于可以省掉一些额外的计算消耗了，但是代码好像看起来越来越臃肿了。那么我们尝试下不使用递归来实现另外一种求解斐波拉契数列的方式。</p>
<pre><code><span class="function"><span class="keyword">int</span> <span class="title">calculateLinear</span><span class="params">(<span class="keyword">int</span> n)</span></span>{
    <span class="keyword">if</span>(n &lt; <span class="number">2</span>){
        <span class="keyword">return</span> n;
    }
    <span class="keyword">int</span> f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];
    f[<span class="number">0</span>] = <span class="number">0</span>; f[<span class="number">1</span>] = <span class="number">1</span>;
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt; n; i++){
        f[i]= f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];
    }
    <span class="keyword">return</span> f[n];
}
</code></pre><p>这个段代码我们还可以继续简化它的存储占用。因为斐波拉契数列第N个数只和它的前两个相邻数相关，所以在计算过程中，其实我们只需要存储相关两个数，就可以计算出第N个数了，完全没有必要存储每一位的数值。</p>
<pre><code><span class="label">int</span> calculateLinear(int n){
    //看，我们连数值界限判断都可以省掉了，真是太优雅了！
    int <span class="literal">f0</span> = <span class="number">0</span>, <span class="literal">f1</span> = <span class="number">1</span><span class="comment">;</span>
    for(int i = <span class="number">0</span><span class="comment">; i&lt; n; i++){</span>
        <span class="literal">f1</span> = <span class="literal">f1</span> + <span class="literal">f0</span><span class="comment">;</span>
        <span class="literal">f0</span> = <span class="literal">f1</span> - <span class="literal">f0</span><span class="comment">;</span>
    }
    return <span class="literal">f0</span><span class="comment">;</span>
}
</code></pre><p>嗯，这段代码实现也很简洁，并且成功的减少了内存堆栈的消耗。Good！<br>那么下一个问题来了，斐波拉契数列值是指数增长的，但是java中int类型的最大值是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^&#123;31&#125; -1 = 2147483647</span><br></pre></td></tr></table></figure></p>
<p>当使用上面实现的代码计算就可以发现计算到F[47]的时候就出现溢出了……那么我们换成long类型呢？</p>
<pre><code><span class="label">long</span> calculateLinear(long n){

    long <span class="literal">f0</span> = <span class="number">0</span>, <span class="literal">f1</span> = <span class="number">1</span><span class="comment">;</span>
    for(long i = <span class="number">0</span><span class="comment">; i&lt; n; i++){</span>
        <span class="literal">f1</span> = <span class="literal">f1</span> + <span class="literal">f0</span><span class="comment">;</span>
        <span class="literal">f0</span> = <span class="literal">f1</span> - <span class="literal">f0</span><span class="comment">;</span>
    }
    return <span class="literal">f0</span><span class="comment">;</span>
}
</code></pre><p>结果是只能计算到前92个……那只好用上BigInteger了：</p>
<pre><code><span class="keyword">BigInteger </span>calculateLinear(<span class="keyword">BigInteger </span>n){
    <span class="keyword">BigInteger </span><span class="keyword">big1 </span>= new <span class="keyword">BigInteger("1");
</span>    <span class="keyword">BigInteger </span><span class="literal">f0</span> = new <span class="keyword">BigInteger("0"), </span><span class="literal">f1</span> = <span class="keyword">big1;
</span>    for(<span class="keyword">BigInteger </span>i = new <span class="keyword">BigInteger("0"); </span>i.compareTo(n) == -<span class="number">1</span><span class="comment">; i = i.add(big1)){</span>
        <span class="literal">f1</span> = <span class="literal">f1</span>.<span class="keyword">add(f0);
</span>        <span class="literal">f0</span> = <span class="literal">f1</span>.<span class="keyword">subtract(f0);
</span>    }
    return <span class="literal">f0</span><span class="comment">;</span>
}
</code></pre><p>这样我们就可以计算任意大小的斐波拉契数列的数值了么？<br>至少我跑了一晚上，计算到了182324，都没有出现什么错误，只不过是越到后面，计算消耗的时间越长就是了……</p>
<pre><code>fib(182324):    <span class="number">129728660830</span><span class="number">63667881707</span><span class="number">44137779958</span><span class="number">5882006118668</span><span class="number">78942632507</span><span class="number">2248187888830</span><span class="number">57962361182</span><span class="number">30445875493</span><span class="number">51561889708</span><span class="number">82290447672</span><span class="number">660450447177</span><span class="number">263127805455</span><span class="number">578042628245</span><span class="number">74539354542</span><span class="number">51973446939</span><span class="number">066915237883</span><span class="number">64029349597</span><span class="number">53108644471</span><span class="number">21611712154493</span><span class="number">50163877527</span><span class="number">7711100830152</span><span class="number">664335684102</span><span class="number">38038559332</span><span class="number">384629028113</span><span class="number">241744848169</span><span class="number">89157789865</span><span class="number">40498355792</span><span class="number">00786055762</span><span class="number">717303034104</span><span class="number">914912504176</span><span class="number">09734402755</span><span class="number">95078529135</span><span class="number">347101325626</span><span class="number">79036652499</span><span class="number">996155283300</span><span class="number">07670453183</span><span class="number">1219667245948</span><span class="number">504448306198</span><span class="number">469002045118</span><span class="number">68926949863</span><span class="number">7642225106487</span><span class="number">43340260227</span><span class="number">94230689990</span><span class="number">53806972185</span><span class="number">839922571225</span><span class="number">891950086218</span><span class="number">102342839742</span><span class="number">86642336390</span><span class="number">325931157348</span><span class="number">047671126471</span><span class="number">662488017182</span><span class="number">0908361735213</span><span class="number">93464669862</span><span class="number">76928799349</span><span class="number">05346666698</span><span class="number">66081287772</span><span class="number">83972940975</span><span class="number">54046862107</span><span class="number">593138435397</span><span class="number">141328347428</span><span class="number">2229699207236</span><span class="number">21041845119136</span><span class="number">1987720767160</span><span class="number">666945151656</span><span class="number">73155207177</span><span class="number">04691370785</span><span class="number">676250179101</span><span class="number">35470156533</span><span class="number">54675831276</span><span class="number">1587147749945</span><span class="number">52729909339</span><span class="number">67030496342</span><span class="number">57067933898</span><span class="number">80876594792</span><span class="number">277215431949</span><span class="number">2146182788509</span><span class="number">89292233443</span><span class="number">539096387226</span><span class="number">06087932209</span><span class="number">74452845877</span><span class="number">363695504172</span><span class="number">1784685159189</span><span class="number">33132153943</span><span class="number">375184654183</span><span class="number">97194287732</span><span class="number">305342207335</span><span class="number">466244781645</span><span class="number">06995446549</span><span class="number">56446660209</span><span class="number">50776876970</span><span class="number">73185633579</span><span class="number">123082248773</span><span class="number">61076240849</span><span class="number">28745977408</span><span class="number">007764435213</span><span class="number">6151898163708</span><span class="number">03693755174</span><span class="number">2355197039836</span><span class="number">66775473072</span><span class="number">782957403168</span><span class="number">237850926963</span><span class="number">916455824146</span><span class="number">891581253902</span><span class="number">2411718200228</span><span class="number">252882278800</span><span class="number">78577271298</span><span class="number">90329140842</span><span class="number">840315192880</span><span class="number">58844436543</span><span class="number">64048233278</span><span class="number">80302128209</span><span class="number">125562653001</span><span class="number">53086176761</span><span class="number">31209199998</span><span class="number">381240951490</span><span class="number">99785948701</span><span class="number">829497817234</span><span class="number">68394258892</span><span class="number">072827589179</span><span class="number">419300231748</span><span class="number">199551631709</span><span class="number">4807581258248</span><span class="number">84376368481</span><span class="number">02182505733</span><span class="number">5782191235246</span><span class="number">616386112342</span><span class="number">52450226459</span><span class="number">339779542105</span><span class="number">00165285731</span><span class="number">86213971423187</span><span class="number">947921375172</span><span class="number">416581501211</span><span class="number">28283126473</span><span class="number">47792996308</span><span class="number">63544291199</span><span class="number">111644327964</span><span class="number">96959452987</span><span class="number">33600704105</span><span class="number">04081780280</span><span class="number">735654154496</span><span class="number">3891052153838</span><span class="number">865887910204</span><span class="number">865035065240</span><span class="number">546453417195</span><span class="number">33054443797</span><span class="number">96984293425</span><span class="number">75065705237</span><span class="number">28458996361</span><span class="number">75746275283</span><span class="number">99129375361</span><span class="number">05198259834</span><span class="number">01927628076</span><span class="number">03957534765</span><span class="number">781220550184</span><span class="number">71144570190</span><span class="number">1204345591163</span><span class="number">628386334106</span><span class="number">19231969779154</span><span class="number">31231562371</span><span class="number">238961948501</span><span class="number">47182042530</span><span class="number">82499343462</span><span class="number">524163694899</span><span class="number">156300939862</span><span class="number">78815332114186</span><span class="number">1865603132865</span><span class="number">78186359500</span><span class="number">010828129337</span><span class="number">42192893561</span><span class="number">2141118584588</span><span class="number">544876750205</span><span class="number">52005688630</span><span class="number">264380212487</span><span class="number">598267145932</span><span class="number">00158270648</span><span class="number">93443042294</span><span class="number">52831675942</span><span class="number">442081928166</span><span class="number">2044164793431</span><span class="number">94531782060</span><span class="number">91074341030</span><span class="number">953671398210</span><span class="number">271085027108</span><span class="number">498186877633</span><span class="number">1289119984404</span><span class="number">07609350064</span><span class="number">81676248536</span><span class="number">55542285657</span><span class="number">285245766770</span><span class="number">1544945889101</span><span class="number">5471433896193</span><span class="number">1735252740269</span><span class="number">641139403681</span><span class="number">098139785902</span><span class="number">01856498951</span><span class="number">222002502867</span><span class="number">226868480732</span><span class="number">64036162437</span><span class="number">955999181326</span><span class="number">1994645229364</span><span class="number">271620019222</span><span class="number">662581561216</span><span class="number">376037600205</span><span class="number">38793499201</span><span class="number">295767851131</span><span class="number">224409209332</span><span class="number">803750255084</span><span class="number">01095642266</span><span class="number">59454192384</span><span class="number">602355315216</span><span class="number">27349074108</span><span class="number">2414023202488</span><span class="number">57540751527</span><span class="number">09952731243</span><span class="number">71701247107</span><span class="number">74734285165</span><span class="number">52550949902</span><span class="number">157082341555</span><span class="number">43051545938</span><span class="number">00368949048</span><span class="number">53262158186</span><span class="number">1216108975661</span><span class="number">09585268751</span><span class="number">707727794158</span><span class="number">94130434196</span><span class="number">440535222441</span><span class="number">39753202101</span><span class="number">023230964280</span><span class="number">74243588884</span><span class="number">304076728102</span><span class="number">120297758783</span><span class="number">334355986122</span><span class="number">08507602745</span><span class="number">371903768234</span><span class="number">93334097064</span><span class="number">568020126231</span><span class="number">1611431481142</span><span class="number">45406486256</span><span class="number">770177828646</span><span class="number">61635077500</span><span class="number">06389045081</span><span class="number">764244163334</span><span class="number">26837052902</span><span class="number">30742292227</span><span class="number">178309808828</span><span class="number">72726633788</span><span class="number">727763205009</span><span class="number">43873185237</span><span class="number">471850199585</span><span class="number">724130467098</span><span class="number">89508259180</span><span class="number">761348213671</span><span class="number">02467541454</span><span class="number">274557251930</span><span class="number">72544959247</span><span class="number">958788846205</span><span class="number">297081225843</span><span class="number">05299472539</span><span class="number">05275167365</span><span class="number">94354158534</span><span class="number">2202167597763</span><span class="number">985222099095</span><span class="number">41507182254</span><span class="number">89674793299</span><span class="number">877878747189</span><span class="number">27450294983</span><span class="number">91887527593</span><span class="number">85358063395</span><span class="number">43160941027</span><span class="number">427552298187</span><span class="number">523154091884</span><span class="number">901367101329</span><span class="number">89527855328</span><span class="number">26968595729</span><span class="number">78892587587</span><span class="number">550369126964</span><span class="number">285517251285</span><span class="number">84281391554</span><span class="number">513978584185</span><span class="number">43505151528</span><span class="number">274839792241</span><span class="number">49948854954</span><span class="number">992738219481</span><span class="number">30435681500</span><span class="number">92368906199</span><span class="number">49504168275</span><span class="number">457423099252</span><span class="number">424246255408</span><span class="number">857264252572</span><span class="number">06781481093</span><span class="number">586813962115</span><span class="number">842156950994</span><span class="number">56506505449</span><span class="number">69772173533</span><span class="number">227053197893</span><span class="number">26982564759</span><span class="number">94464769093</span><span class="number">63609477482</span><span class="number">38240507206</span><span class="number">65637384382</span><span class="number">60439495043</span><span class="number">45185372749</span><span class="number">507848500125</span><span class="number">08745271306</span><span class="number">76067199744</span><span class="number">2985262089140</span><span class="number">41542277040</span><span class="number">62235134483</span><span class="number">98283026468</span><span class="number">169898467673</span><span class="number">865256291201</span><span class="number">489644025218</span><span class="number">999738375236</span><span class="number">2023727414237</span><span class="number">83636555182</span><span class="number">652420577106</span><span class="number">733400114157</span><span class="number">70667387297</span><span class="number">2528418660120</span><span class="number">27836335060</span><span class="number">0081105546247</span><span class="number">001203205130</span><span class="number">979932254435</span><span class="number">659378609188</span><span class="number">00240280527</span><span class="number">50426935808</span><span class="number">95562451893</span><span class="number">368714606160</span><span class="number">75741461706</span><span class="number">9790811791128</span><span class="number">88993042754</span><span class="number">55961532554</span><span class="number">30199780264</span><span class="number">11492822177239</span><span class="number">896135396649</span><span class="number">61590703887</span><span class="number">561144683458</span><span class="number">781650167478</span><span class="number">223576653035</span><span class="number">222780027095</span><span class="number">74155576750</span><span class="number">49992432332</span><span class="number">06126257137</span><span class="number">7502480342248</span><span class="number">517246192558</span><span class="number">694843144695</span><span class="number">931668144407</span><span class="number">533032156677</span><span class="number">89206140387</span><span class="number">09765973207</span><span class="number">46778633805</span><span class="number">644154752960</span><span class="number">683808254440</span><span class="number">04350226139</span><span class="number">23812052192560</span><span class="number">7379191836204</span><span class="number">03428187967</span><span class="number">1696157492884</span><span class="number">35901805458</span><span class="number">87866954267</span><span class="number">1172656552205</span><span class="number">9316361991206</span><span class="number">63409960767</span><span class="number">164381940746</span><span class="number">553024210506</span><span class="number">3102133579209</span><span class="number">845102762573</span><span class="number">58681347273</span><span class="number">68847094235</span><span class="number">35560878655</span><span class="number">64037080107</span><span class="number">59226986641</span><span class="number">96200253636</span><span class="number">62582502793</span><span class="number">199176645050</span><span class="number">2325847427150</span><span class="number">67430391685</span><span class="number">056270604210</span><span class="number">86237165194</span><span class="number">63031292894</span><span class="number">80582776335</span><span class="number">77162294291</span><span class="number">88896830687</span><span class="number">1011905427219</span><span class="number">471687931123</span><span class="number">241044741487</span><span class="number">99048327791</span><span class="number">932253685095</span><span class="number">52526729295</span><span class="number">149470126679</span><span class="number">82204651494</span><span class="number">836861021103</span><span class="number">417693134486</span><span class="number">203874962880</span><span class="number">245744799178</span><span class="number">681186251497</span><span class="number">100436891079</span><span class="number">255300307142</span><span class="number">00557578197</span><span class="number">2357696191551</span><span class="number">479094223738</span><span class="number">924255942644</span><span class="number">54562796746</span><span class="number">79362171125</span><span class="number">60601177961</span><span class="number">90207397896</span><span class="number">92852139368</span><span class="number">935622176152</span><span class="number">04729736841</span><span class="number">102960277163</span><span class="number">53156377926</span><span class="number">7230551723186</span><span class="number">87475844401</span><span class="number">466827355115</span><span class="number">98775336353</span><span class="number">81365851486</span><span class="number">258212451739</span><span class="number">317236350852</span><span class="number">03161265526</span><span class="number">28741154665</span><span class="number">413941366117</span><span class="number">360214203386</span><span class="number">2239913122647</span><span class="number">11567391513128</span><span class="number">466373419136</span><span class="number">29129862198</span><span class="number">809146041536</span><span class="number">7453161268129</span><span class="number">309690173407</span><span class="number">70545078704</span><span class="number">85707003683</span><span class="number">90950755676</span><span class="number">61367561880</span><span class="number">886246926346</span><span class="number">26337590379</span><span class="number">460595206800</span><span class="number">1331497169301</span><span class="number">47906560864</span><span class="number">06943882387</span><span class="number">73171750999</span><span class="number">29270895242</span><span class="number">26796731484</span><span class="number">67332007230</span><span class="number">88851848646</span><span class="number">902210493225</span><span class="number">97843461597</span><span class="number">58973455333</span><span class="number">726508141608</span><span class="number">129369176994</span><span class="number">483763201441</span><span class="number">71496045165</span><span class="number">67614661871208</span><span class="number">98164731229</span><span class="number">79755947390</span><span class="number">95903929275</span><span class="number">34584090673</span><span class="number">33356967708</span><span class="number">38992481493</span><span class="number">46780029438</span><span class="number">863177671495</span><span class="number">110403855530</span><span class="number">44428543887</span><span class="number">186798683381</span><span class="number">1441850409155</span><span class="number">54670655767</span><span class="number">566168660640</span><span class="number">7727522406234</span><span class="number">85168285135</span><span class="number">50786255939</span><span class="number">03435148997</span><span class="number">588063771168</span><span class="number">3257621778225</span><span class="number">214552405996</span><span class="number">97134534377</span><span class="number">60985040769</span><span class="number">27007799359</span><span class="number">66300869957</span><span class="number">9647142091242</span><span class="number">438318208635</span><span class="number">245735739454</span><span class="number">1708785479132</span><span class="number">372769103126</span><span class="number">55440097928</span><span class="number">005514569143</span><span class="number">00206952804</span><span class="number">00841366133</span><span class="number">535684235849</span><span class="number">57207509705</span><span class="number">89306938943</span><span class="number">88689960737</span><span class="number">1617068906110</span><span class="number">03031737164</span><span class="number">40437070402</span><span class="number">308506173255</span><span class="number">03578275084</span><span class="number">79297635658</span><span class="number">76642529504</span><span class="number">29342658259</span><span class="number">726496139186</span><span class="number">936164453870</span><span class="number">73928931865</span><span class="number">220084744408</span><span class="number">90899340440</span><span class="number">158665684197</span><span class="number">66480797203</span><span class="number">227266258306</span><span class="number">29503793493</span><span class="number">76865709269</span><span class="number">782491239049</span><span class="number">361954253003</span><span class="number">259218656552</span><span class="number">82355598952</span><span class="number">11901397239484</span><span class="number">397308007138</span><span class="number">2811440653110</span><span class="number">69092083176</span><span class="number">62945761751</span><span class="number">039116136081</span><span class="number">78979375152</span><span class="number">32967431762</span><span class="number">1779694557142</span><span class="number">69289236749</span><span class="number">68110061130184</span><span class="number">177034407774</span><span class="number">0149122024151</span><span class="number">94685035035</span><span class="number">429035044254</span><span class="number">56880962004</span><span class="number">47851644691</span><span class="number">5341705218895</span><span class="number">34909269704</span><span class="number">778260225295</span><span class="number">91753069259</span><span class="number">954839657170</span><span class="number">28368150229</span><span class="number">72802565180</span><span class="number">072989397138</span><span class="number">10871496299142</span><span class="number">69432145567</span><span class="number">820564043136</span><span class="number">58283505390</span><span class="number">41455702494</span><span class="number">893678819166</span><span class="number">33984383271</span><span class="number">83270997591</span><span class="number">02174804184</span><span class="number">75870539555</span><span class="number">3731565452135</span><span class="number">5877371159152</span><span class="number">384646780160</span><span class="number">7911501179570</span><span class="number">2316181659176</span><span class="number">057403549119</span><span class="number">33886254308</span><span class="number">64808355741</span><span class="number">197701148133</span><span class="number">45630492466</span><span class="number">784678126654</span><span class="number">84440984208</span><span class="number">78126181363</span><span class="number">32887282479</span><span class="number">56397472158</span><span class="number">912822237276</span><span class="number">829546730198</span><span class="number">08764854745</span><span class="number">167631352463</span><span class="number">945286304192</span><span class="number">7842242436206</span><span class="number">29070791002</span><span class="number">70976297299</span><span class="number">203136682730</span><span class="number">26952575143</span><span class="number">51574084282</span><span class="number">374804198442</span><span class="number">259286910114</span><span class="number">987843104257</span><span class="number">2229460177940</span><span class="number">06504187076</span><span class="number">99990641938</span><span class="number">109409449955</span><span class="number">146488658266</span><span class="number">484242097501</span><span class="number">28851041368</span><span class="number">75272747851</span><span class="number">97093832939</span><span class="number">36580226992</span><span class="number">5842169108772</span><span class="number">05254556309</span><span class="number">62529137558</span><span class="number">464131696569</span><span class="number">511868595162</span><span class="number">911947171262</span><span class="number">3741679644170</span><span class="number">69801398383</span><span class="number">35966793204</span><span class="number">052122668206</span><span class="number">82961106173</span><span class="number">92752871976</span><span class="number">97158684870</span><span class="number">50396851546</span><span class="number">36062696150</span><span class="number">03646189762</span><span class="number">601325325155</span><span class="number">2061644115393</span><span class="number">134127640157</span><span class="number">835125577962</span><span class="number">5571640443152</span><span class="number">76570004582</span><span class="number">75960787375</span><span class="number">69206177926</span><span class="number">74969371949</span><span class="number">671914916168</span><span class="number">32399497445</span><span class="number">91649048054</span><span class="number">90765294882</span><span class="number">43141581156</span><span class="number">93894372862</span><span class="number">89381869096</span><span class="number">270939087172</span><span class="number">55568042784</span><span class="number">486798771253</span><span class="number">2901421232599</span><span class="number">40131686832</span><span class="number">343253559366</span><span class="number">384304806192</span><span class="number">58444332531</span><span class="number">288837220779</span><span class="number">516904245282</span><span class="number">127945454599</span><span class="number">77136844000</span><span class="number">39236652762</span><span class="number">7602238541213</span><span class="number">61969205745</span><span class="number">51280405764</span><span class="number">502463107782</span><span class="number">72373452406</span><span class="number">56265859735</span><span class="number">94089094970</span><span class="number">156205570992</span><span class="number">760834146245</span><span class="number">068495582112</span><span class="number">83162337437</span><span class="number">27375548196</span><span class="number">86586995784</span><span class="number">033733628203</span><span class="number">34459629161</span><span class="number">30037165541</span><span class="number">89895301943</span><span class="number">228837399245</span><span class="number">87956272462</span><span class="number">00837370142</span><span class="number">783385336150</span><span class="number">28191804583</span><span class="number">49149704099</span><span class="number">952494781142</span><span class="number">94868688694</span><span class="number">50298996684</span><span class="number">265834296180</span><span class="number">32665055401</span><span class="number">428026494154</span><span class="number">924106207735</span><span class="number">923235928469</span><span class="number">896220901691</span><span class="number">74240734597</span><span class="number">54239747609</span><span class="number">9629261362122</span><span class="number">606658149143</span><span class="number">362620537228</span><span class="number">154484652666</span><span class="number">00200340978</span><span class="number">90148333128</span><span class="number">840221502858</span><span class="number">72763671176</span><span class="number">56432997795</span><span class="number">90175907464</span><span class="number">51193463292</span><span class="number">696655135768</span><span class="number">375133585405</span><span class="number">09233940309</span><span class="number">29046937766</span><span class="number">80336479753</span><span class="number">165650793937</span><span class="number">85186293887</span><span class="number">43392559690</span><span class="number">28769753530</span><span class="number">898226549840</span><span class="number">236831131692</span><span class="number">31945651160</span><span class="number">99226241082</span><span class="number">686547979101</span><span class="number">94856577861</span><span class="number">606090171604</span><span class="number">557131174336</span><span class="number">047814252476</span><span class="number">56362986364</span><span class="number">97154460056</span><span class="number">284107257538</span><span class="number">787537247345</span><span class="number">91073635841</span><span class="number">85336975472</span><span class="number">55239273463</span><span class="number">59385941278</span><span class="number">07678180395</span><span class="number">36029992329</span><span class="number">292772155062</span><span class="number">33400057736</span><span class="number">960249203932</span><span class="number">241865505562</span><span class="number">29600876962</span><span class="number">6368491061114</span><span class="number">981298193780</span><span class="number">45466497738</span><span class="number">443769442182</span><span class="number">250906286888</span><span class="number">3231570266138</span><span class="number">77834944675</span><span class="number">549707227942</span><span class="number">42692666940</span><span class="number">548279998157</span><span class="number">707151026234</span><span class="number">207905966927</span><span class="number">36438732882</span><span class="number">61741979473</span><span class="number">835180638473</span><span class="number">56462085943</span><span class="number">35446042131</span><span class="number">93231380667</span><span class="number">226737547773</span><span class="number">07644451474</span><span class="number">1700713996228</span><span class="number">5861377574116</span><span class="number">1604170133674</span><span class="number">435141131359</span><span class="number">29394468534</span><span class="number">98978656586</span><span class="number">2013086136556</span><span class="number">781594961214</span><span class="number">61378989700</span><span class="number">8803571781212</span><span class="number">2354477222452</span><span class="number">102743385988</span><span class="number">005499136009</span><span class="number">43126853107</span><span class="number">37603094933</span><span class="number">553689877107</span><span class="number">488236642277</span><span class="number">69007502142</span><span class="number">903681864164</span><span class="number">28538781953</span><span class="number">2501984902116</span><span class="number">917420956176</span><span class="number">31997795766</span><span class="number">53362780071</span><span class="number">69562834006</span><span class="number">964564175384</span><span class="number">2254179889196</span><span class="number">30699957870</span><span class="number">05428591282</span><span class="number">38202629843</span><span class="number">00868208150</span><span class="number">87145690548</span><span class="number">41590388365</span><span class="number">2295208651484</span><span class="number">02207447174</span><span class="number">60756779237</span><span class="number">0893892247151</span><span class="number">179850233368</span><span class="number">373220056539</span><span class="number">039189958049</span><span class="number">72439249103</span><span class="number">32566662441</span><span class="number">68626093727</span><span class="number">528940204004</span><span class="number">80498627252</span><span class="number">081975106181</span><span class="number">27535472946</span><span class="number">38575730497</span><span class="number">63862761549</span><span class="number">90003836677</span><span class="number">34377479439</span><span class="number">75245790580</span><span class="number">084076138851</span><span class="number">541491242365</span><span class="number">792056182075</span><span class="number">70182948028</span><span class="number">41601761587</span><span class="number">2114097732199</span><span class="number">136353808045</span><span class="number">8421125566139</span><span class="number">878129876556</span><span class="number">041691675114</span><span class="number">154995207661</span><span class="number">3412210849165</span><span class="number">636118475550</span><span class="number">60092894149</span><span class="number">09634699934</span><span class="number">860117952106</span><span class="number">50640045168</span><span class="number">02487806267</span><span class="number">411147034428</span><span class="number">57483471363</span><span class="number">72787553228</span><span class="number">058893181048</span><span class="number">1029265159673</span><span class="number">46576873947</span><span class="number">080807131855</span><span class="number">34551653629</span><span class="number">56908750384</span><span class="number">211585652735</span><span class="number">82482775077</span><span class="number">05440193357</span><span class="number">57400305958</span><span class="number">71086454408</span><span class="number">66526737543</span><span class="number">973992394183</span><span class="number">12152039087159</span><span class="number">71178802027</span><span class="number">41932003772</span><span class="number">1580182080085</span><span class="number">72705344575</span><span class="number">378045242176</span><span class="number">525654112046</span><span class="number">712707237631</span><span class="number">617246695186</span><span class="number">97444471077</span><span class="number">004505665184</span><span class="number">479016185162</span><span class="number">43455187153</span><span class="number">27246052372</span><span class="number">073524608180</span><span class="number">10351425237493</span><span class="number">504930610211</span><span class="number">778398118289</span><span class="number">59837477002</span><span class="number">89956675638</span><span class="number">340106548304</span><span class="number">84893866682</span><span class="number">30667685479</span><span class="number">40728450938</span><span class="number">578738697118</span><span class="number">35340281260</span><span class="number">09931992292</span><span class="number">1563633433130</span><span class="number">690164773047</span><span class="number">2354766859171</span><span class="number">32359756479</span><span class="number">55062088631</span><span class="number">47768141975</span><span class="number">58308060541</span><span class="number">87167028490</span><span class="number">67666280269</span><span class="number">873820492129</span><span class="number">9811602177404</span><span class="number">98405237796</span><span class="number">2461819012183</span><span class="number">149359242775</span><span class="number">864984155653</span><span class="number">777922402226</span><span class="number">183949533796</span><span class="number">96165382085</span><span class="number">09201726299</span><span class="number">864984281158</span><span class="number">00094188484</span><span class="number">806712781177</span><span class="number">79546488105</span><span class="number">583632860199</span><span class="number">77027749742</span><span class="number">909183479568</span><span class="number">565708191684</span><span class="number">788793357123</span><span class="number">33534547499</span><span class="number">41143188965</span><span class="number">631279243586</span><span class="number">47591598027</span><span class="number">67304835401</span><span class="number">120378986747</span><span class="number">957103948835</span><span class="number">02696760190</span><span class="number">6684361497192</span><span class="number">979205039673</span><span class="number">458126098774</span><span class="number">84199847636</span><span class="number">79028572972</span><span class="number">621621230027</span><span class="number">33476256338</span><span class="number">793065868183</span><span class="number">93248877483</span><span class="number">1001099685155</span><span class="number">900652605167</span><span class="number">239741261474</span><span class="number">843130331634</span><span class="number">01145964306</span><span class="number">790208571357</span><span class="number">132394694664</span><span class="number">494598350190</span><span class="number">42377969496</span><span class="number">63372878277</span><span class="number">016044141627</span><span class="number">200251627164</span><span class="number">445046376234</span><span class="number">74973663493</span><span class="number">508180749751</span><span class="number">2174197149475</span><span class="number">380721617157</span><span class="number">176022312181161</span><span class="number">0282368330167</span><span class="number">55852703888</span><span class="number">42795501128</span><span class="number">41303793576</span><span class="number">028314144909</span><span class="number">39093657560</span><span class="number">27934263949</span><span class="number">33000776882</span><span class="number">145377308225</span><span class="number">75787069732</span><span class="number">324130097346</span><span class="number">974208753668</span><span class="number">95160567387</span><span class="number">37487972007</span><span class="number">2459738724166</span><span class="number">1865175584971</span><span class="number">380522779135</span><span class="number">877538666130</span><span class="number">239966301746</span><span class="number">81193080994</span><span class="number">483369402190</span><span class="number">826805253968</span><span class="number">00664005555</span><span class="number">82306790790</span><span class="number">49175649305</span><span class="number">921460354161</span><span class="number">923162504082</span><span class="number">46375941467</span><span class="number">04997047833</span><span class="number">52335456862</span><span class="number">699070492218</span><span class="number">44110992014206</span><span class="number">03532675899</span><span class="number">77251130047</span><span class="number">58143027760</span><span class="number">745215874195</span><span class="number">126207158755</span><span class="number">921362541125</span><span class="number">2456874121785</span><span class="number">184780983470</span><span class="number">41978433857</span><span class="number">89974462542</span><span class="number">783884144263</span><span class="number">295424206981</span><span class="number">03605343944</span><span class="number">285209300941</span><span class="number">72579888879</span><span class="number">57338544466</span><span class="number">990820311143</span><span class="number">43662596042</span><span class="number">70470852460</span><span class="number">38543577609</span><span class="number">87295550440</span><span class="number">0665071133209</span><span class="number">178483085800</span><span class="number">39933197433</span><span class="number">8591945028119</span><span class="number">816254567166</span><span class="number">2512593990215</span><span class="number">1939145437051</span><span class="number">60654858006</span><span class="number">81933591969</span><span class="number">294171942749</span><span class="number">69005058793</span><span class="number">50429545684</span><span class="number">94277239592</span><span class="number">990143757681</span><span class="number">047100399675</span><span class="number">918208945045</span><span class="number">28228981377</span><span class="number">248147992258</span><span class="number">39063299648</span><span class="number">794588054221</span><span class="number">592173060355</span><span class="number">2414291216709</span><span class="number">94469684706</span><span class="number">30877835404</span><span class="number">99294470429</span><span class="number">75494639876</span><span class="number">70161952878</span><span class="number">929232933502</span><span class="number">65307478864</span><span class="number">72562842860</span><span class="number">4682261217698</span><span class="number">71506027336</span><span class="number">4562811826181</span><span class="number">124085944485</span><span class="number">79398175932</span><span class="number">02569086628</span><span class="number">622226335345</span><span class="number">27862847274</span><span class="number">867848830202</span><span class="number">481978179835</span><span class="number">614130603951</span><span class="number">140237994776</span><span class="number">70929233867</span><span class="number">62341069296</span><span class="number">164352985552</span><span class="number">04248495763</span><span class="number">1305884653106</span><span class="number">87260030989</span><span class="number">52752243153</span><span class="number">569848213376</span><span class="number">54829030061</span><span class="number">1241203350273</span><span class="number">8851260891216</span><span class="number">8782378213903</span><span class="number">31382997152</span><span class="number">907276910222</span><span class="number">91502909576</span><span class="number">35333701157</span><span class="number">536764456105</span><span class="number">04502598167</span><span class="number">11542443124841</span><span class="number">109542305464</span><span class="number">091328304162</span><span class="number">164271926892</span><span class="number">58179802298</span><span class="number">742971173034</span><span class="number">08938393282</span><span class="number">833487254842</span><span class="number">990110428096</span><span class="number">618984209235</span><span class="number">986947753225</span><span class="number">41948345971</span><span class="number">86540868595</span><span class="number">26772196226</span><span class="number">13882006321232</span><span class="number">73876105700</span><span class="number">52569463185</span><span class="number">834552161331</span><span class="number">07335236603</span><span class="number">1130782851142</span><span class="number">62855048548</span><span class="number">2219138828249</span><span class="number">852194297795</span><span class="number">63254490598</span><span class="number">72598380268</span><span class="number">91599505458</span><span class="number">76538260559</span><span class="number">47439281193</span><span class="number">67258739778</span><span class="number">956753991239</span><span class="number">278187757076</span><span class="number">361152393266</span><span class="number">34278678685</span><span class="number">56265858435</span><span class="number">54736653729</span><span class="number">350350203549</span><span class="number">081228438181</span><span class="number">40971838194</span><span class="number">656930165948</span><span class="number">473974543252</span><span class="number">48402333227</span><span class="number">46304669270</span><span class="number">5171549407144</span><span class="number">320622888101</span><span class="number">617669602182</span><span class="number">981289243932</span><span class="number">60382533628</span><span class="number">66035674097</span><span class="number">66959493174</span><span class="number">54999238343</span><span class="number">1225616121226</span><span class="number">970734799116</span><span class="number">47588285574</span><span class="number">5360501788229</span><span class="number">3878881954111</span><span class="number">58804538337</span><span class="number">23232206532100</span><span class="number">30876778400</span><span class="number">43502397727</span><span class="number">75680600107</span><span class="number">99361070779</span><span class="number">52979504606</span><span class="number">935796441111</span><span class="number">80947951094</span><span class="number">45509191294</span><span class="number">969937661197</span><span class="number">64033138663</span><span class="number">38542562962</span><span class="number">05032363551</span><span class="number">66195277171</span><span class="number">473163209609</span><span class="number">570471232669</span><span class="number">819482206637</span><span class="number">020428101937</span><span class="number">00233329457</span><span class="number">30384335897</span><span class="number">44445688147</span><span class="number">185764274878</span><span class="number">728118252337</span><span class="number">82062101829</span><span class="number">950094132964</span><span class="number">02171993701</span><span class="number">261217430164</span><span class="number">076459214547</span><span class="number">48758729445</span><span class="number">1387754087152</span><span class="number">415733377163</span><span class="number">34178947292</span><span class="number">98745052200</span><span class="number">64057289736</span><span class="number">710321608135</span><span class="number">5241610169446</span><span class="number">07788969579</span><span class="number">55806966976</span><span class="number">64780283247</span><span class="number">26633899409</span><span class="number">9751354780165</span><span class="number">96081075973</span><span class="number">891093964144</span><span class="number">633131931702</span><span class="number">198492150941</span><span class="number">221856051826</span><span class="number">28894877776</span><span class="number">47668044653</span><span class="number">116831501629</span><span class="number">249000066352</span><span class="number">500422184665</span><span class="number">09245931382</span><span class="number">283869968249</span><span class="number">29294990286</span><span class="number">36738788087</span><span class="number">551651201249</span><span class="number">74787255257</span><span class="number">545047293124</span><span class="number">990214271363</span><span class="number">1875212652385</span><span class="number">98927073862</span><span class="number">429159947157</span><span class="number">8421901202108</span><span class="number">42584001460</span><span class="number">92908329139</span><span class="number">3585491006241</span><span class="number">82041806977</span><span class="number">71779273006</span><span class="number">99549325779</span><span class="number">6456811666216</span><span class="number">75940788632</span><span class="number">684139091392</span><span class="number">42093844379</span><span class="number">75583983504</span><span class="number">827050788132</span><span class="number">229577407538</span><span class="number">62445204470</span><span class="number">6612301820197</span><span class="number">2220829232967</span><span class="number">75544295136</span><span class="number">49062202307</span><span class="number">153858342127</span><span class="number">308090195885</span><span class="number">03783731902</span><span class="number">11011125256230</span><span class="number">8073111727215</span><span class="number">47167505675</span><span class="number">55607635030</span><span class="number">4172166838195</span><span class="number">59106738755</span><span class="number">477654233881</span><span class="number">633484208640</span><span class="number">932954104802</span><span class="number">9112193223425</span><span class="number">78226989149</span><span class="number">42190546864</span><span class="number">01150967888</span><span class="number">395144979454</span><span class="number">2506137838640</span><span class="number">731215844757</span><span class="number">962135732052</span><span class="number">85048472052</span><span class="number">849242795336</span><span class="number">01990841057</span><span class="number">134199346703</span><span class="number">73632202784</span><span class="number">2507353149644</span><span class="number">227552307588</span><span class="number">39572496301</span><span class="number">42063968648</span><span class="number">096192550539</span><span class="number">143578172529</span><span class="number">01672729577</span><span class="number">925901656223</span><span class="number">2206206308903</span><span class="number">028379154793</span><span class="number">84337451363</span><span class="number">565772254768</span><span class="number">870124771894</span><span class="number">48782476991</span><span class="number">437365004153</span><span class="number">964265166149</span><span class="number">43595109860</span><span class="number">42587894777</span><span class="number">1980126943872</span><span class="number">868140774700</span><span class="number">77128866256</span><span class="number">964374984136</span><span class="number">79205881590</span><span class="number">4691631206493</span><span class="number">222337735040</span><span class="number">32481232592</span><span class="number">000214585360</span><span class="number">554184327475</span><span class="number">688911547207</span><span class="number">931819172003</span><span class="number">324553185868</span><span class="number">82804809085</span><span class="number">77640132690</span><span class="number">431047191887</span><span class="number">654001706142</span><span class="number">84005487546</span><span class="number">73749260680</span><span class="number">00734866402</span><span class="number">08308680409</span><span class="number">399964825175</span><span class="number">51884590727</span><span class="number">475649707229</span><span class="number">45409333727</span><span class="number">83548551434</span><span class="number">4091708132339</span><span class="number">26301396758</span><span class="number">97705744259</span><span class="number">86481159328</span><span class="number">72842246975</span><span class="number">9241287899200</span><span class="number">38779594739</span><span class="number">72905750039</span><span class="number">43193281327</span><span class="number">177095681499</span><span class="number">075111659090</span><span class="number">02838773871</span><span class="number">166247189243</span><span class="number">180568529134</span><span class="number">2147452921155</span><span class="number">001174696769</span><span class="number">58269831883</span><span class="number">623565954112</span><span class="number">5441031136230</span><span class="number">7531131109593</span><span class="number">76447172671</span><span class="number">574044151786</span><span class="number">27485871967</span><span class="number">603953293144</span><span class="number">060388158596</span><span class="number">957874086241</span><span class="number">31843641891</span><span class="number">60104535055</span><span class="number">56596934687</span><span class="number">38436778040</span><span class="number">517705834139</span><span class="number">185107191778</span><span class="number">722395971201</span><span class="number">29850233526</span><span class="number">566210058655</span><span class="number">69294867400</span><span class="number">701863391244</span><span class="number">4490812559174</span><span class="number">55808292536</span><span class="number">433952046110</span><span class="number">91949867563</span><span class="number">52679485570</span><span class="number">53303368240</span><span class="number">66601866649</span><span class="number">32285051692</span><span class="number">29636050694</span><span class="number">98269091845</span><span class="number">77793838960</span><span class="number">28426829854</span><span class="number">0522037919132</span><span class="number">1084123804697</span><span class="number">146347167903</span><span class="number">723140891672</span><span class="number">62174301874</span><span class="number">9822036819139</span><span class="number">2082549203767</span><span class="number">45378046226</span><span class="number">626694103675</span><span class="number">70266403882</span><span class="number">630112108438</span><span class="number">674861376122</span><span class="number">28548535346</span><span class="number">633447224869</span><span class="number">949239952595</span><span class="number">01566103738</span><span class="number">1514176654792</span><span class="number">67945425808</span><span class="number">25695090492</span><span class="number">316066170205</span><span class="number">72977649672</span><span class="number">09759673708</span><span class="number">94858667205</span><span class="number">47302238290</span><span class="number">85977196336</span><span class="number">91681000149</span><span class="number">456067457145</span><span class="number">2101994182199</span><span class="number">49848471857</span><span class="number">173478271569</span><span class="number">505178771578</span><span class="number">41067247682</span><span class="number">36849485769</span><span class="number">990249957359</span><span class="number">587219657703</span><span class="number">03106992651</span><span class="number">94157675365</span><span class="number">873572961172</span><span class="number">350534093115</span><span class="number">78491801253</span><span class="number">879271348188</span><span class="number">611184286649</span><span class="number">27052196682</span><span class="number">443537001156</span><span class="number">1916700115700</span><span class="number">27660633092</span><span class="number">269601148991</span><span class="number">487595110197</span><span class="number">62204085584</span><span class="number">92886939496</span><span class="number">195758908258</span><span class="number">52294733870</span><span class="number">195806236903</span><span class="number">06766091463</span><span class="number">73103552747</span><span class="number">55992474945</span><span class="number">88497145903</span><span class="number">8281895178382</span><span class="number">830104962854</span><span class="number">5491301515244</span><span class="number">4669741150169</span><span class="number">07291177165</span><span class="number">34583442689</span><span class="number">84597379528</span><span class="number">722171340301</span><span class="number">39305694881</span><span class="number">69131183237</span><span class="number">72872066328</span><span class="number">42439280883</span><span class="number">97436044784</span><span class="number">33829805885</span><span class="number">56097942247</span><span class="number">740086512202</span><span class="number">968166309789</span><span class="number">9881662125575</span><span class="number">79889672408</span><span class="number">50853953692</span><span class="number">25693274436</span><span class="number">39696869986</span><span class="number">81974243088</span><span class="number">30436671140</span><span class="number">310213661094</span><span class="number">07025700393</span><span class="number">53367963571</span><span class="number">3612413162031</span><span class="number">855189929651</span><span class="number">132269867955</span><span class="number">05768537795</span><span class="number">57573193135</span><span class="number">73245108633</span><span class="number">29136225671</span><span class="number">68299538895</span><span class="number">76169760049</span><span class="number">74577347370</span><span class="number">40233288450</span><span class="number">88030582177</span><span class="number">45565493370</span><span class="number">30640626830</span><span class="number">82539705887</span><span class="number">35947326469</span><span class="number">59996153480</span><span class="number">209030266370</span><span class="number">227567339932</span><span class="number">2461734150561</span><span class="number">74488262199</span><span class="number">758176945055</span><span class="number">29055386157</span><span class="number">77275989181</span><span class="number">918342239079</span><span class="number">031146089853</span><span class="number">299889222105</span><span class="number">37389337003</span><span class="number">553994116975</span><span class="number">58281036349</span><span class="number">47334350472</span><span class="number">441118793298</span><span class="number">48387951159</span><span class="number">04885326700</span><span class="number">09478663696</span><span class="number">835001104197</span><span class="number">53948940158</span><span class="number">924818148641</span><span class="number">93706300440</span><span class="number">254366303943</span><span class="number">155133494643</span><span class="number">88976997393</span><span class="number">723221563331</span><span class="number">214950640908</span><span class="number">49176641270</span><span class="number">44000759650</span><span class="number">884951450226</span><span class="number">77759505573</span><span class="number">7322459126655</span><span class="number">893176080567</span><span class="number">63770275876</span><span class="number">181080373934</span><span class="number">272163178706</span><span class="number">58234241156</span><span class="number">725742661163</span><span class="number">049791791129</span><span class="number">027895211555</span><span class="number">766907159263</span><span class="number">1713784382163</span><span class="number">824148701827</span><span class="number">339255886459</span><span class="number">88970608086</span><span class="number">621878609217</span><span class="number">402488008202</span><span class="number">0161786232296</span><span class="number">1624365181098</span><span class="number">70781036383</span><span class="number">66975763488</span><span class="number">72780627746</span><span class="number">57653841374</span><span class="number">53391557034</span><span class="number">06000727342</span><span class="number">2377490245545</span><span class="number">82558477082</span><span class="number">01257134090</span><span class="number">870110644074</span><span class="number">254227094230</span><span class="number">50878659159</span><span class="number">338613048253</span><span class="number">38678699259</span><span class="number">557182035746</span><span class="number">63696794849</span><span class="number">119044627856</span><span class="number">45158734452</span><span class="number">230788401075</span><span class="number">509880178451</span><span class="number">45099305650</span><span class="number">55491462969</span><span class="number">874134260580</span><span class="number">76887927079</span><span class="number">97931576433</span><span class="number">098174933067</span><span class="number">87841065883</span><span class="number">36747027271</span><span class="number">1884113174083</span><span class="number">1384575684132</span><span class="number">75308008446</span><span class="number">486046514230</span><span class="number">899743175962</span><span class="number">855458331169</span><span class="number">022103501057</span><span class="number">858841434219</span><span class="number">06077229140</span><span class="number">89460036869</span><span class="number">742237003265</span><span class="number">277287184931</span><span class="number">584363114631</span><span class="number">73948603968</span><span class="number">728970200632</span><span class="number">52094632044</span><span class="number">4682515712111</span><span class="number">980890227703</span><span class="number">08897040561</span><span class="number">98376081267</span><span class="number">59863771327</span><span class="number">57044990444</span><span class="number">1137475125802</span><span class="number">64995145276</span><span class="number">86067359283</span><span class="number">94788897089</span><span class="number">01605882370</span><span class="number">814960155495</span><span class="number">1611201664509</span><span class="number">30393555490</span><span class="number">815116041838</span><span class="number">49737229374</span><span class="number">17152010855176</span><span class="number">195140193639</span><span class="number">49351227134</span><span class="number">190769186552</span><span class="number">681083575241</span><span class="number">73502035157</span><span class="number">83303770101</span><span class="number">30270872532</span><span class="number">99960759579</span><span class="number">79407995402</span><span class="number">08483593760</span><span class="number">07933352195</span><span class="number">451189348066</span><span class="number">469285224529</span><span class="number">95052229291</span><span class="number">77041655650</span><span class="number">568770133380</span><span class="number">625096160971</span><span class="number">30290208094</span><span class="number">1577705593176</span><span class="number">27902380754</span><span class="number">00953351864</span><span class="number">73589138039</span><span class="number">1186156228296</span><span class="number">250208347063</span><span class="number">28560685160</span><span class="number">1534836703198</span><span class="number">124093755941</span><span class="number">1840267225494</span><span class="number">08133433378</span><span class="number">37806302982</span><span class="number">83235535032</span><span class="number">637759164133</span><span class="number">099707912222</span><span class="number">342914148065</span><span class="number">98831680933</span><span class="number">42798359232</span><span class="number">75038398390</span><span class="number">034113699737</span><span class="number">633562133691</span><span class="number">63606865354</span><span class="number">93367192077</span><span class="number">182394074801</span><span class="number">197853958049</span><span class="number">50580346199</span><span class="number">05171306746</span><span class="number">1248385985150</span><span class="number">659962146754</span><span class="number">99781528834</span><span class="number">980179999396</span><span class="number">37296962167</span><span class="number">39733700332</span><span class="number">1010167966607</span><span class="number">170234207458</span><span class="number">86932704898</span><span class="number">543719165193</span><span class="number">50955873470</span><span class="number">59457992076</span><span class="number">2353080756147</span><span class="number">62820561960194</span><span class="number">63412901989168</span><span class="number">7961963254799</span><span class="number">341993170901</span><span class="number">207552294479</span><span class="number">28052261471</span><span class="number">960459244835</span><span class="number">430318322235</span><span class="number">494957238167</span><span class="number">763246062547</span><span class="number">206366376703</span><span class="number">06676438280</span><span class="number">44472251881</span><span class="number">682208463467</span><span class="number">63045763806</span><span class="number">817780426237</span><span class="number">11085082091149</span><span class="number">45502392696</span><span class="number">520298273219</span><span class="number">35930254406</span><span class="number">75031656756</span><span class="number">49603141909</span><span class="number">31102134176</span><span class="number">69579326169</span><span class="number">93051874785</span><span class="number">972206531242</span><span class="number">314121656628</span><span class="number">934240193160</span><span class="number">792569916188</span><span class="number">601862223264</span><span class="number">05507728680</span><span class="number">86731080003</span><span class="number">55277543108</span><span class="number">1968208502366</span><span class="number">01048265248</span><span class="number">55957285333</span><span class="number">210162106834</span><span class="number">49539709832</span><span class="number">226992540184</span><span class="number">75766429726</span><span class="number">850192097543</span><span class="number">97182604494</span><span class="number">04247368870</span><span class="number">54478806189</span><span class="number">895175785644</span><span class="number">229342363099</span><span class="number">7462092439157</span><span class="number">102884496443</span><span class="number">30526462586</span><span class="number">49090901959</span><span class="number">843166855950</span><span class="number">354550530202</span><span class="number">48303456206</span><span class="number">00366002151</span><span class="number">83294773766</span><span class="number">26656070103</span><span class="number">81804650687</span><span class="number">56565668701</span><span class="number">67537402252</span><span class="number">96849826534</span><span class="number">73883854491</span><span class="number">642535116446</span><span class="number">90966384456</span><span class="number">02256349075</span><span class="number">70581662705</span><span class="number">59076870048</span><span class="number">792189204659</span><span class="number">389818173949</span><span class="number">04828488181</span><span class="number">1252200964143</span><span class="number">297218597907</span><span class="number">04708772592</span><span class="number">98867091132</span><span class="number">1499671335220</span><span class="number">266753112087</span><span class="number">62234700827</span><span class="number">829255339426</span><span class="number">47979483081</span><span class="number">1431999880134</span><span class="number">70657777649</span><span class="number">916493250996</span><span class="number">048184942559</span><span class="number">911293504118</span><span class="number">49776942127</span><span class="number">05894966629</span><span class="number">045107903206</span><span class="number">10442300104962</span><span class="number">39793960765</span><span class="number">308690975217</span><span class="number">447327804212</span><span class="number">9192602287151</span><span class="number">87370441867</span><span class="number">299326216249</span><span class="number">328139427391</span><span class="number">724259125432</span><span class="number">9920491596252</span><span class="number">6131655382100</span><span class="number">92405271699</span><span class="number">69675059128</span><span class="number">929220941162</span><span class="number">29738205263</span><span class="number">5241815717116</span><span class="number">68840852799</span><span class="number">2019773211867</span><span class="number">70556577664</span><span class="number">79732627345</span><span class="number">00903288652</span><span class="number">183441905075</span><span class="number">675339698175</span><span class="number">912040168381</span><span class="number">08166794266</span><span class="number">77161703497</span><span class="number">33472775847</span><span class="number">25899438994</span><span class="number">04801796348</span><span class="number">01480242830</span><span class="number">09038782308</span><span class="number">1637793586120</span><span class="number">70883849253</span><span class="number">2556161568052</span><span class="number">61656539394</span><span class="number">86485150859</span><span class="number">6381746179726</span><span class="number">40188455463</span><span class="number">67896186161</span><span class="number">25964355934</span><span class="number">2811112134171</span><span class="number">8092489218952</span><span class="number">397224344231</span><span class="number">27898869944</span><span class="number">04944953902</span><span class="number">392947112988</span><span class="number">1963521519191</span><span class="number">189626296783</span><span class="number">844197140749</span><span class="number">56183754287</span><span class="number">142465878532</span><span class="number">25893637328</span><span class="number">28770791707</span><span class="number">38482382466</span><span class="number">34190889266</span><span class="number">40201383388</span><span class="number">57474974090</span><span class="number">43805170834</span><span class="number">70844092164</span><span class="number">09775462661</span><span class="number">90102054541</span><span class="number">185695081533</span><span class="number">3902118535245</span><span class="number">995328118959</span><span class="number">650212597908</span><span class="number">747961172651</span><span class="number">703150026546</span><span class="number">46075207999</span><span class="number">02986568470</span><span class="number">979081977149</span><span class="number">37602331379</span><span class="number">95866701851</span><span class="number">497345181647</span><span class="number">318136088162</span><span class="number">32451179859</span><span class="number">39802535427</span><span class="number">50744334528</span><span class="number">92495133031</span><span class="number">50170336183</span><span class="number">613643855202</span><span class="number">59250092025</span><span class="number">900538893115</span><span class="number">97028392352</span><span class="number">65900429597</span><span class="number">379200994699</span><span class="number">07975758100</span><span class="number">09803554633</span><span class="number">1926295432250</span><span class="number">1500104661526</span><span class="number">606202851029</span><span class="number">869202301699</span><span class="number">87452506196</span><span class="number">46945932656</span><span class="number">58495674298</span><span class="number">5775792082221</span><span class="number">244176465029</span><span class="number">224030243799</span><span class="number">824055118840</span><span class="number">66856392204</span><span class="number">2277050155435</span><span class="number">703670675211</span><span class="number">93577272093</span><span class="number">28179581534</span><span class="number">911370878125</span><span class="number">281663068161</span><span class="number">34309030136</span><span class="number">86862175853</span><span class="number">43268789390</span><span class="number">876580971252</span><span class="number">2293168600847</span><span class="number">756702066104</span><span class="number">674155569890</span><span class="number">520153930779</span><span class="number">8162101970162</span><span class="number">72331438043</span><span class="number">03327300544</span><span class="number">95047132596</span><span class="number">40251133491</span><span class="number">64961428138</span><span class="number">50945589338</span><span class="number">79894296737</span><span class="number">54229293709</span><span class="number">461962167170</span><span class="number">89991176736</span><span class="number">77560552173</span><span class="number">93572973943</span><span class="number">72458488366</span><span class="number">185089634739</span><span class="number">575732198226</span><span class="number">064878527254</span><span class="number">315612345200</span><span class="number">46340487507</span><span class="number">65365343153</span><span class="number">61629589706</span><span class="number">163590978009</span><span class="number">73030095062</span><span class="number">685384906187</span><span class="number">05344173959</span><span class="number">01528086687</span><span class="number">42655432780</span><span class="number">79846038431</span><span class="number">46860389108</span><span class="number">214875974791</span><span class="number">31707867988</span><span class="number">34784925878</span><span class="number">206532827295</span><span class="number">79344797538</span><span class="number">181530759390</span><span class="number">53534165247</span><span class="number">589174791849</span><span class="number">53255788964</span><span class="number">41527334732</span><span class="number">89542583907</span><span class="number">05188043286</span><span class="number">61076965708</span><span class="number">71942839490</span><span class="number">25630730909</span><span class="number">0475012487241</span><span class="number">636148792390</span><span class="number">08657762874</span><span class="number">81946135993</span><span class="number">51486938268</span><span class="number">792144926062</span><span class="number">132105165859</span><span class="number">070292958212</span><span class="number">156478139433</span><span class="number">40098704570</span><span class="number">83539447865</span><span class="number">34676087049</span><span class="number">046029103748</span><span class="number">262104945969</span><span class="number">633319404241</span><span class="number">081795299251</span><span class="number">47283995676</span><span class="number">556129998490</span><span class="number">1957186640892</span><span class="number">45303899628</span><span class="number">91586556599</span><span class="number">28389653771</span><span class="number">43345488336</span><span class="number">59796862809</span><span class="number">04870639802</span><span class="number">62246361572</span><span class="number">32394329628</span><span class="number">47689893606</span><span class="number">47038763085</span><span class="number">597101279675</span><span class="number">96146042243</span><span class="number">81452848026</span><span class="number">244326189876</span><span class="number">169542728051</span><span class="number">68508638562</span><span class="number">155299853627</span><span class="number">19981690140088</span><span class="number">681357160477</span><span class="number">78055473668</span><span class="number">062434728185</span><span class="number">051132409380</span><span class="number">36484094527</span><span class="number">06226193036</span><span class="number">30566727478</span><span class="number">03560391454</span><span class="number">037250749636</span><span class="number">33997550669</span><span class="number">62532995094</span><span class="number">90487909254</span><span class="number">73302505795</span><span class="number">81144191437</span><span class="number">54632592073</span><span class="number">93785182748</span><span class="number">078008252967</span><span class="number">797315219039</span><span class="number">95435588093</span><span class="number">85665708063</span><span class="number">206409909798</span><span class="number">84206868175</span><span class="number">97192629806</span><span class="number">64598342542</span><span class="number">28164798191</span><span class="number">950140581531</span><span class="number">4281183212070</span><span class="number">69428372766</span><span class="number">503159383503</span><span class="number">194327101344</span><span class="number">0311533806238</span><span class="number">00181987835</span><span class="number">29959987033</span><span class="number">99238962571</span><span class="number">42888241777</span><span class="number">03797227277</span><span class="number">598942228783</span><span class="number">02578073484</span><span class="number">97752055171</span><span class="number">92279534132</span><span class="number">51390550932</span><span class="number">79551329336</span><span class="number">7579511455252</span><span class="number">516270224145</span><span class="number">67992409668</span><span class="number">77358957728</span><span class="number">513224151935</span><span class="number">529374230664</span><span class="number">14991659764253</span><span class="number">197258145144</span><span class="number">851984111708</span><span class="number">571532166353</span><span class="number">2499174396041</span><span class="number">60841266865</span><span class="number">46407905626</span><span class="number">33387626392</span><span class="number">891717228482</span><span class="number">41068292963</span><span class="number">624745119770</span><span class="number">823212478497</span><span class="number">511201798636</span><span class="number">48361428208</span><span class="number">94903286350</span><span class="number">674135841858</span><span class="number">00589946081</span><span class="number">164354490169</span><span class="number">996715102979</span><span class="number">715873634214</span><span class="number">499875656191</span><span class="number">5778352095217</span><span class="number">07581846705</span><span class="number">613505033198</span><span class="number">031583322177</span><span class="number">2103120006588</span><span class="number">182326708307</span><span class="number">83934391138</span><span class="number">155385555848</span><span class="number">476428102240</span><span class="number">308247237233</span><span class="number">294048175287</span><span class="number">500525153692</span><span class="number">265420604179</span><span class="number">88801843350</span><span class="number">574911201953</span><span class="number">63831703682</span><span class="number">226007837430</span><span class="number">87871946428</span><span class="number">60809032338</span><span class="number">66360880257</span><span class="number">943040126186</span><span class="number">942931175482</span><span class="number">186975648904</span><span class="number">766839839146</span><span class="number">1512329126188</span><span class="number">547025190185</span><span class="number">173645684363</span><span class="number">570233360441</span><span class="number">1543076182498</span><span class="number">41806672546</span><span class="number">34102465032</span><span class="number">29652462335</span><span class="number">88595571303</span><span class="number">52773499779</span><span class="number">05049658958</span><span class="number">01789843698</span><span class="number">73190584656</span><span class="number">568316332158</span><span class="number">7866552481171</span><span class="number">99842251338</span><span class="number">44702807886</span><span class="number">20461963970211</span><span class="number">545969154072</span><span class="number">162205341658</span><span class="number">90663082028</span><span class="number">88270035657</span><span class="number">55851202588</span><span class="number">341132753398</span><span class="number">75909196755</span><span class="number">69190944888</span><span class="number">901054692177</span><span class="number">509241743008</span><span class="number">70252387197</span><span class="number">2622331104403</span><span class="number">33633946706</span><span class="number">79166742900</span><span class="number">218496483854</span><span class="number">573060113161</span><span class="number">85173944254</span><span class="number">77744691866</span><span class="number">302892148761</span><span class="number">86947533038</span><span class="number">59684041657</span><span class="number">43062437554</span><span class="number">99585101493</span><span class="number">95673298792</span><span class="number">550725222332</span><span class="number">551132952226</span><span class="number">107646876084</span><span class="number">542399193792</span><span class="number">187744702992</span><span class="number">71759306896</span><span class="number">894783166425</span><span class="number">88470176037</span><span class="number">251977509195</span><span class="number">30887773069</span><span class="number">03944651706</span><span class="number">31876199366</span><span class="number">5036042541138</span><span class="number">302891291253</span><span class="number">091841222784</span><span class="number">323128838139</span><span class="number">67928699457</span><span class="number">34263238371</span><span class="number">97145597163</span><span class="number">32675793606</span><span class="number">54746008531</span><span class="number">92841572547</span><span class="number">181268668734</span><span class="number">88937804547</span><span class="number">202876038855</span><span class="number">01805242733</span><span class="number">49982062074</span><span class="number">85870964146</span><span class="number">55245130769</span><span class="number">67460170996</span><span class="number">395452293219</span><span class="number">172253229495</span><span class="number">63838150465</span><span class="number">212089068664</span><span class="number">131879149156</span><span class="number">58249644459</span><span class="number">827783142152</span><span class="number">65381790773</span><span class="number">56157126935</span><span class="number">78446579366</span><span class="number">51079089756</span><span class="number">114426066350</span><span class="number">865954940220</span><span class="number">655954222497</span><span class="number">957673672173</span><span class="number">2246730259235</span><span class="number">42643771740</span><span class="number">2414515368223</span><span class="number">58956307432</span><span class="number">34193681035</span><span class="number">26586262302</span><span class="number">254507359980</span><span class="number">556848156290</span><span class="number">062117034948</span><span class="number">554347188943</span><span class="number">547156507209</span><span class="number">233680745792</span><span class="number">647173308074</span><span class="number">38983451585</span><span class="number">981483251097</span><span class="number">27805830576</span><span class="number">87555449274</span><span class="number">58146853079</span><span class="number">65588391235</span><span class="number">249430655186</span><span class="number">018205168157</span><span class="number">84467573984</span><span class="number">44086877276</span><span class="number">249960454342</span><span class="number">90426728353</span><span class="number">297164194506</span><span class="number">929167449046</span><span class="number">85046826956</span><span class="number">94580787473</span><span class="number">38351144860</span><span class="number">72806740660</span><span class="number">550609858124</span><span class="number">72676963060</span><span class="number">33175484498</span><span class="number">9211243726228</span><span class="number">290361995252</span><span class="number">89778031177</span><span class="number">52965687399</span><span class="number">01763034685</span><span class="number">627662612233</span><span class="number">66353028057</span><span class="number">114525774291</span><span class="number">1548086161875</span><span class="number">572934024188</span><span class="number">291949695135</span><span class="number">98448233442</span><span class="number">431942124702</span><span class="number">05139209106</span><span class="number">20094361033202</span><span class="number">978248071374</span><span class="number">948205376754</span><span class="number">35985507096</span><span class="number">552655435240</span><span class="number">06331151127</span><span class="number">90436440134</span><span class="number">0745782150229</span><span class="number">33737547593</span><span class="number">66309640747</span><span class="number">74973631101</span><span class="number">55973555502</span><span class="number">08581407160</span><span class="number">177026130102</span><span class="number">257489090124</span><span class="number">71676663995</span><span class="number">09894084236</span><span class="number">149168972866</span><span class="number">53738770086</span><span class="number">53953753367</span><span class="number">59833599659</span><span class="number">989321165451</span><span class="number">64082977256</span><span class="number">83637930869</span><span class="number">96479265085</span><span class="number">575947972148</span><span class="number">78042768581</span><span class="number">95998692186</span><span class="number">147780963275</span><span class="number">86364149645</span><span class="number">106786204063</span><span class="number">959471201486</span><span class="number">28459355776</span><span class="number">981423234745</span><span class="number">75242327431</span><span class="number">08237670259</span><span class="number">199967341687</span><span class="number">69856032359</span><span class="number">562847824155</span><span class="number">61288400288</span><span class="number">93534129537</span><span class="number">23766311865106</span><span class="number">41349375070</span><span class="number">49253284588</span><span class="number">42694046094</span><span class="number">989388162661</span><span class="number">40384042998</span><span class="number">27052597926</span><span class="number">31991670451</span><span class="number">04071391082</span><span class="number">236137642798</span><span class="number">7301902027229</span><span class="number">211427392960</span><span class="number">164874068058</span><span class="number">35837877969</span><span class="number">2016179750407</span><span class="number">764302915173</span><span class="number">90980741503</span><span class="number">45946681874</span><span class="number">646283248254</span><span class="number">564196194335</span><span class="number">63926985597</span><span class="number">91761984172</span><span class="number">38039863590</span><span class="number">121583334359</span><span class="number">05006602853</span><span class="number">804758228529</span><span class="number">428126045566</span><span class="number">36730236670</span><span class="number">68808667190</span><span class="number">56182964344</span><span class="number">201493682197</span><span class="number">85063884536</span><span class="number">493721206191</span><span class="number">823478293100</span><span class="number">58974989105</span><span class="number">31558556327</span><span class="number">7094672555248</span><span class="number">58748450035</span><span class="number">32471237059</span><span class="number">732053134346</span><span class="number">736078045147</span><span class="number">23162069028134</span><span class="number">53892484501</span><span class="number">155468787477</span><span class="number">94248605092</span><span class="number">28036545653</span><span class="number">258794899141</span><span class="number">06675756509</span><span class="number">217034062679</span><span class="number">024114632139</span><span class="number">47977890741</span><span class="number">36876603878</span><span class="number">38206559070</span><span class="number">69792983273</span><span class="number">339420675230</span><span class="number">045894180101</span><span class="number">59127143907</span><span class="number">49976389747</span><span class="number">434367346171</span><span class="number">665553848164</span><span class="number">26701305639</span><span class="number">71374050433</span><span class="number">65896326882</span><span class="number">66779995279</span><span class="number">46396106433</span><span class="number">2236438240702</span><span class="number">868361635129</span><span class="number">98094678067</span><span class="number">6542340969177</span><span class="number">205185536795</span><span class="number">48753276277</span><span class="number">062240302662</span><span class="number">39106909597</span><span class="number">79961850839</span><span class="number">28698188696</span><span class="number">565605169743</span><span class="number">68001094704</span><span class="number">82446784256</span><span class="number">05240276658</span><span class="number">122489791887</span><span class="number">326277295117</span><span class="number">35104450389</span><span class="number">968549449255</span><span class="number">40572450847</span><span class="number">83135136503</span><span class="number">561142106308</span><span class="number">000204751346</span><span class="number">56741344779</span><span class="number">382319126071</span><span class="number">60485981377</span><span class="number">239695794290</span><span class="number">79077231004</span><span class="number">00955091989</span><span class="number">54634356389</span><span class="number">77971577787</span><span class="number">682136137365</span><span class="number">4601257765160</span><span class="number">28878490307</span><span class="number">79190958677</span><span class="number">875172280677</span><span class="number">997824587137</span><span class="number">767958203296</span><span class="number">32276135165</span><span class="number">0659781103154</span><span class="number">85574378766</span><span class="number">69203596102</span><span class="number">261120958048</span><span class="number">189101584780</span><span class="number">809237141163</span><span class="number">856251396862</span><span class="number">05238671196</span><span class="number">047375225150</span><span class="number">67337993486</span><span class="number">01871501187</span><span class="number">65582940952</span><span class="number">3831295209430</span><span class="number">05281232883</span><span class="number">729188546145</span><span class="number">96106745800</span><span class="number">69353590278</span><span class="number">66773209280</span><span class="number">94440885781</span><span class="number">286814058251</span><span class="number">48828085789</span><span class="number">705916151439</span><span class="number">5418752441249</span><span class="number">194090569130</span><span class="number">61379150380</span><span class="number">00681692676</span><span class="number">42032593570</span><span class="number">35689645587</span><span class="number">70276798687</span><span class="number">03435108392</span><span class="number">07586462656</span><span class="number">08289601857</span><span class="number">08366589889</span><span class="number">44961694925</span><span class="number">866916123138</span><span class="number">74401843994</span><span class="number">92401898673</span><span class="number">1009459206361</span><span class="number">1880958182453</span><span class="number">05358059559</span><span class="number">70853982472</span><span class="number">155969766344</span><span class="number">863248109893</span><span class="number">61781885542</span><span class="number">4463672521118</span><span class="number">666877895167</span><span class="number">42701896853</span><span class="number">6192361013148</span><span class="number">134569064278</span><span class="number">74584767429</span><span class="number">624121191045</span><span class="number">923285186690</span><span class="number">239633867945</span><span class="number">080162479537</span><span class="number">52573289232</span><span class="number">94370849734</span><span class="number">786142552563</span><span class="number">9663662220146</span><span class="number">065083850136</span><span class="number">30867758250</span><span class="number">02081359870</span><span class="number">114375162834</span><span class="number">85980992884</span><span class="number">32379782507</span><span class="number">230094268748</span><span class="number">4892085767209</span><span class="number">94864235230</span><span class="number">727087185395</span><span class="number">59741768397</span><span class="number">45932287356</span><span class="number">27678699556</span><span class="number">82259349934</span><span class="number">247209150062</span><span class="number">644224351291</span><span class="number">96130688704</span><span class="number">59158566666</span><span class="number">870090307146</span><span class="number">469535911177</span><span class="number">63907843637</span><span class="number">350198985054</span><span class="number">989759145059</span><span class="number">40202061433</span><span class="number">90658656434</span><span class="number">005487220297</span><span class="number">080816509168</span><span class="number">90088654752</span><span class="number">629599825134</span><span class="number">173932445663</span><span class="number">96553831761</span><span class="number">156662161600</span><span class="number">460188537887</span><span class="number">953128753330</span><span class="number">29857456195</span><span class="number">47783036189</span><span class="number">74835376573</span><span class="number">67260192846</span><span class="number">31875158870</span><span class="number">83768155378</span><span class="number">29758588841</span><span class="number">185202351255</span><span class="number">109483438340</span><span class="number">7238421488219</span><span class="number">027373412222</span><span class="number">34168527705</span><span class="number">708666133829</span><span class="number">33887239268</span><span class="number">21115941541164</span><span class="number">774225960064</span><span class="number">290673154303</span><span class="number">38432506333</span><span class="number">6061958479231</span><span class="number">2359820321178</span><span class="number">84673754896</span><span class="number">837378139699</span><span class="number">184771886637</span><span class="number">213268701146</span><span class="number">74048806478</span><span class="number">56231451566</span><span class="number">47863846054</span><span class="number">58595094048</span><span class="number">806097189829</span><span class="number">186865732231</span><span class="number">87643902733</span><span class="number">155189392591</span><span class="number">3602446164505</span><span class="number">882538240907</span><span class="number">498165230982</span><span class="number">68947267741</span><span class="number">196570850476</span><span class="number">38962354978</span><span class="number">754140993531</span><span class="number">55536278081</span><span class="number">74496204068</span><span class="number">9235051588174</span><span class="number">95260509004</span><span class="number">68257478286</span><span class="number">881190260530</span><span class="number">02647262704</span><span class="number">502336930231</span><span class="number">063139766266</span><span class="number">454642050104</span><span class="number">1777316212737</span><span class="number">165953044003</span><span class="number">36756079185</span><span class="number">747463741216</span><span class="number">493856318219</span><span class="number">764213537882</span><span class="number">148041674233</span><span class="number">217047199067</span><span class="number">5317451918123</span><span class="number">2323931644148</span><span class="number">2457908237004</span><span class="number">77541341092</span><span class="number">37570484694</span><span class="number">80729092574</span><span class="number">36489653286</span><span class="number">69932402782</span><span class="number">71294700491</span><span class="number">67204653507</span><span class="number">175306554852</span><span class="number">70196789108</span><span class="number">03704354863</span><span class="number">026899216038</span><span class="number">043140341280</span><span class="number">70693865635</span><span class="number">1529771487219</span><span class="number">78595598945</span><span class="number">768026388200</span><span class="number">41932866333</span><span class="number">04953168244</span><span class="number">98401767182</span><span class="number">82758048038</span><span class="number">92377374346</span><span class="number">4851927143004</span><span class="number">069181752855</span><span class="number">83504668964</span><span class="number">9624201407227</span><span class="number">50336567780</span><span class="number">5172312708139</span><span class="number">73028355077</span><span class="number">984885379123</span><span class="number">851402193301</span><span class="number">206965092336</span><span class="number">26346885645</span><span class="number">50905173657</span><span class="number">50667635000</span><span class="number">28358478686</span><span class="number">01994177004</span><span class="number">65173844257</span><span class="number">61891138879</span><span class="number">1469763077222</span><span class="number">841409054230</span><span class="number">1585892211477</span><span class="number">47276504548</span><span class="number">65027769984</span><span class="number">91997470343</span><span class="number">85244539047</span><span class="number">05742906000</span><span class="number">241192483589</span><span class="number">009481907217</span><span class="number">21422040201629</span><span class="number">470045250790</span><span class="number">99685880341</span><span class="number">26445797187</span><span class="number">07974930305</span><span class="number">223782429779</span><span class="number">222344190508</span><span class="number">709445220466</span><span class="number">97040868944</span><span class="number">32068965429</span><span class="number">464800152401</span><span class="number">77506075373</span><span class="number">671224571682</span><span class="number">3062408123880</span><span class="number">133607360627</span><span class="number">09955531362</span><span class="number">49699193528</span><span class="number">664102094526</span><span class="number">63852061241</span><span class="number">49336126054</span><span class="number">77503998504</span><span class="number">8019501018137</span><span class="number">00364232289</span><span class="number">383253487592</span><span class="number">097343105445</span><span class="number">214689177140</span><span class="number">65633957431</span><span class="number">107733442329</span><span class="number">488201059447</span><span class="number">745207860426</span><span class="number">299679218906</span><span class="number">44791307528</span><span class="number">54746232132</span><span class="number">56425991271</span><span class="number">46658787384</span><span class="number">886344211727</span><span class="number">77341785736</span><span class="number">99959435239</span><span class="number">113961557946</span><span class="number">32927771696</span><span class="number">383629633156</span><span class="number">54078784587</span><span class="number">642941163260</span><span class="number">81699026149</span><span class="number">538240085490</span><span class="number">71501140908</span><span class="number">85694383941</span><span class="number">575511433233</span><span class="number">393219969807</span><span class="number">53934567605</span><span class="number">628614194678</span><span class="number">223426340090</span><span class="number">560235666692</span><span class="number">441117339969</span><span class="number">25983383940</span><span class="number">006421850235</span><span class="number">09254350003</span><span class="number">97960687596</span><span class="number">786144085575</span><span class="number">899696186362</span><span class="number">94572395665</span><span class="number">44139684596</span><span class="number">54487334607</span><span class="number">189594900152</span><span class="number">1374101136958</span><span class="number">65305439038</span><span class="number">80926987709</span><span class="number">93542873230</span><span class="number">97949696340</span><span class="number">45344349864</span><span class="number">04328477004</span><span class="number">6681694947112</span><span class="number">7171113320146</span><span class="number">03851687061</span><span class="number">106733982597</span><span class="number">06772440170</span><span class="number">141657376089</span><span class="number">07167226932</span><span class="number">1968553239298</span><span class="number">279132837551</span><span class="number">41796973368</span><span class="number">89426199230</span><span class="number">198252663797</span><span class="number">0369922302176</span><span class="number">810130850868</span><span class="number">62269865244</span><span class="number">414920201598</span><span class="number">5462124086138</span><span class="number">716001185102</span><span class="number">40663978935</span><span class="number">01484189877</span><span class="number">54078971126</span><span class="number">25996632688</span><span class="number">09996248032</span><span class="number">02029591752</span><span class="number">021378139637</span><span class="number">563301199804</span><span class="number">410867060239</span><span class="number">62286241098</span><span class="number">26948803883</span><span class="number">49695359156</span><span class="number">42755848434</span><span class="number">85766553059</span><span class="number">596040005106</span><span class="number">898510298206</span><span class="number">33551287434</span><span class="number">827183625756</span><span class="number">027598199845</span><span class="number">964239148187</span><span class="number">76985896665</span><span class="number">26241826631</span><span class="number">91505630683</span><span class="number">70939686605</span><span class="number">935108193927</span><span class="number">072578197931</span><span class="number">38798097398</span><span class="number">96127485944</span><span class="number">29973698608</span><span class="number">2144749922106</span><span class="number">277203874708</span><span class="number">71306932306</span><span class="number">08101487964</span><span class="number">60103756049</span><span class="number">947763550124</span><span class="number">958111994263</span><span class="number">55655106627</span><span class="number">33109866307</span><span class="number">76382939663</span><span class="number">201989073465</span><span class="number">865215604500</span><span class="number">09271830259</span><span class="number">089232833185</span><span class="number">42529181070</span><span class="number">59253008349</span><span class="number">47539429436</span><span class="number">57449664945</span><span class="number">47533771162</span><span class="number">97778336581</span><span class="number">42397280234</span><span class="number">44852237560</span><span class="number">207483429268</span><span class="number">07691892659</span><span class="number">92148850801</span><span class="number">89731100746</span><span class="number">839842495109</span><span class="number">0651025179751</span><span class="number">749774815226</span><span class="number">42502985292</span><span class="number">726791157451</span><span class="number">04003342729</span><span class="number">69186962783</span><span class="number">92448690342</span><span class="number">760179751644</span><span class="number">03450049971</span><span class="number">77586769228</span><span class="number">201748238909</span><span class="number">35227270006</span><span class="number">65153503982</span><span class="number">2375515120429</span><span class="number">09066088293</span><span class="number">17795462049170</span><span class="number">611079146731</span><span class="number">2377471205204</span><span class="number">596217707852</span><span class="number">2508009838187</span><span class="number">596158591675</span><span class="number">104359105038</span><span class="number">82560695934</span><span class="number">171991535344</span><span class="number">655158750652</span><span class="number">372013183589</span><span class="number">468295069180</span><span class="number">373603799150</span><span class="number">80681156398</span><span class="number">02228442253</span><span class="number">31595096905</span><span class="number">461342492254</span><span class="number">84703249330</span><span class="number">188759347489</span><span class="number">67980532328</span><span class="number">46292300727</span><span class="number">41633641459</span><span class="number">6766452311175</span><span class="number">186532944693</span><span class="number">801212865347</span><span class="number">924019647181</span><span class="number">235157259129</span><span class="number">994573548176</span><span class="number">02135980231</span><span class="number">296215164345</span><span class="number">29381255927</span><span class="number">85143579679</span><span class="number">68948853375</span><span class="number">2212235269469</span><span class="number">50405078408</span><span class="number">840285673218</span><span class="number">38540545152</span><span class="number">45988807296</span><span class="number">38830567830</span><span class="number">318233095226</span><span class="number">118083498342</span><span class="number">31076274184</span><span class="number">599114940588</span><span class="number">68926935756</span><span class="number">83376172559</span><span class="number">73956192350</span><span class="number">98994932369</span><span class="number">369249660395</span><span class="number">33552443501</span><span class="number">419167947444</span><span class="number">254870553977</span><span class="number">052205886742</span><span class="number">4691754585224</span><span class="number">49185497362</span><span class="number">02950987141</span><span class="number">75071305084</span><span class="number">2199330358215</span><span class="number">4072450411164</span><span class="number">528553433151</span><span class="number">152178653581</span><span class="number">278610454145</span><span class="number">83350855046</span><span class="number">48834189199</span><span class="number">2246000715111</span><span class="number">36354083990</span><span class="number">61545038035</span><span class="number">975999923191</span><span class="number">04105530562</span><span class="number">81456607162</span><span class="number">61257297571</span><span class="number">713865312158</span><span class="number">27599336868</span><span class="number">10971295173003</span><span class="number">328942103609</span><span class="number">1216895575165</span><span class="number">72605959378</span><span class="number">37627930642</span><span class="number">40297064746</span><span class="number">5680602111183</span><span class="number">037001838212</span><span class="number">56060889553</span><span class="number">34300204329</span><span class="number">602215597725</span><span class="number">721697199084</span><span class="number">964749198825</span><span class="number">89340088396</span><span class="number">225426277330</span><span class="number">78498889575</span><span class="number">7162399835213</span><span class="number">607397186937</span><span class="number">099635458171</span><span class="number">34383262963</span><span class="number">463433346210</span><span class="number">37906145264</span><span class="number">87644382951</span><span class="number">45026576099</span><span class="number">757272696228</span><span class="number">61472892369</span><span class="number">030260131406</span><span class="number">97990100657</span><span class="number">73030536197</span><span class="number">2437171281499</span><span class="number">2027921998131</span><span class="number">44638373862</span><span class="number">76443840480</span><span class="number">84455052868</span><span class="number">9311307059119</span><span class="number">502355203539</span><span class="number">062090772248</span><span class="number">2380141133645</span><span class="number">57146527705</span><span class="number">65482645037</span><span class="number">84572430129</span><span class="number">88081406732</span><span class="number">916441092199</span><span class="number">46101067838</span><span class="number">66244069907</span><span class="number">65202776132</span><span class="number">72986359479</span><span class="number">4821663411178</span><span class="number">6771891783227</span><span class="number">38651948397</span><span class="number">668137131468</span><span class="number">27680283450</span><span class="number">081884201329</span><span class="number">54599526628</span><span class="number">376303202352</span><span class="number">280910560131</span><span class="number">36139346728</span><span class="number">341105131032</span><span class="number">920164753679</span><span class="number">450628275139</span><span class="number">84393102887</span><span class="number">880208475351</span><span class="number">01656568631</span><span class="number">5581460173763</span><span class="number">05249870776</span><span class="number">70107265677</span><span class="number">822155553680</span><span class="number">89137831060</span><span class="number">152601073703</span><span class="number">68960738357</span><span class="number">96600405257</span><span class="number">64527895985</span><span class="number">1646175240551</span><span class="number">67231634567</span><span class="number">02473006537</span><span class="number">68175147478</span><span class="number">72366056897</span><span class="number">399221092636</span><span class="number">097423470232</span><span class="number">76340687304</span><span class="number">5101332792207</span><span class="number">2338605207409</span><span class="number">39228476974</span><span class="number">09604859247</span><span class="number">99440199189</span><span class="number">077042189838</span><span class="number">75559225831</span><span class="number">969153333158</span><span class="number">84624812030125</span><span class="number">218330085592</span><span class="number">649278684160</span><span class="number">94369460427</span><span class="number">223595589563</span><span class="number">80394368888</span><span class="number">66677786576</span><span class="number">3935671029224</span><span class="number">94256979293</span><span class="number">658310192206</span><span class="number">222103567679</span><span class="number">130972395543</span><span class="number">1752817047231</span><span class="number">32944482598</span><span class="number">05827041191</span><span class="number">30051239632</span><span class="number">800231581238</span><span class="number">43301605059</span><span class="number">37269448709</span><span class="number">838088228126</span><span class="number">37467083796</span><span class="number">951969106000</span><span class="number">64641779540</span><span class="number">86158185631</span><span class="number">235090032030</span><span class="number">49405200533</span><span class="number">41379905693</span><span class="number">848160230080</span><span class="number">145172160753</span><span class="number">90232861663</span><span class="number">244366649434</span><span class="number">28080867850</span><span class="number">67397526456</span><span class="number">6011487377227</span><span class="number">560809181497</span><span class="number">2268048208828</span><span class="number">30451333444</span><span class="number">0062136988249</span><span class="number">231679064590</span><span class="number">857384175874</span><span class="number">2244196088036</span><span class="number">2037255603332</span><span class="number">87133595241</span><span class="number">08528381455</span><span class="number">78358054275</span><span class="number">120929208138</span><span class="number">47792056795</span><span class="number">1299081511187</span><span class="number">03893765532</span><span class="number">40446945039</span><span class="number">71041408778</span><span class="number">38678564688</span><span class="number">04442328188</span><span class="number">64443978929</span><span class="number">66660633849</span><span class="number">69545502353</span><span class="number">47348829787</span><span class="number">39298077772</span><span class="number">9201394488129</span><span class="number">2522826933105</span><span class="number">778202287829</span><span class="number">71925989794</span><span class="number">68195771128</span><span class="number">35058656856</span><span class="number">51360979894</span><span class="number">60926155353</span><span class="number">510331170246</span><span class="number">49185269037</span><span class="number">97534697806</span><span class="number">78430168499</span><span class="number">50231631489</span><span class="number">140573208180</span><span class="number">295594256247</span><span class="number">243748061335</span><span class="number">93265199673</span><span class="number">34252755168</span><span class="number">658402088179</span><span class="number">62553327095</span><span class="number">699729102769</span><span class="number">52039176509</span><span class="number">53358504474</span><span class="number">1882733946253</span><span class="number">70184881843</span><span class="number">59167009246</span><span class="number">05072484101</span><span class="number">91543508252</span><span class="number">40907158994</span><span class="number">532472167689</span><span class="number">60730970441</span><span class="number">673217665779</span><span class="number">739017139153</span><span class="number">6322161698157</span><span class="number">2530311149429</span><span class="number">48799850059</span><span class="number">34526206538</span><span class="number">4736271019237</span><span class="number">59882377969</span><span class="number">42181183730</span><span class="number">54963394082</span><span class="number">421949245787</span><span class="number">30714572377106</span><span class="number">909416888112</span><span class="number">561685213071</span><span class="number">1911863553159</span><span class="number">258587206385</span><span class="number">95202895753</span><span class="number">06354392475</span><span class="number">014692172007</span><span class="number">35665389565</span><span class="number">54337594199</span><span class="number">151249690657</span><span class="number">172601536581</span><span class="number">69769033972</span><span class="number">752374268125</span><span class="number">032563418226</span><span class="number">83301839151</span><span class="number">94427357404</span><span class="number">6852517449179</span><span class="number">62942735796</span><span class="number">67037603342</span><span class="number">05882384730</span><span class="number">70817421939136</span><span class="number">387610103709</span><span class="number">856443136752</span><span class="number">760608829255</span><span class="number">51237094146</span><span class="number">519219256861</span><span class="number">75251399203</span><span class="number">06966536858</span><span class="number">0609162304146</span><span class="number">812194192704</span><span class="number">78579055704</span><span class="number">09180500701</span><span class="number">975059135466</span><span class="number">07007972391</span><span class="number">88332644687</span><span class="number">284014607118</span><span class="number">47180890547</span><span class="number">37178986960</span><span class="number">212664707827</span><span class="number">91433834289</span><span class="number">253098698571</span><span class="number">58354292887</span><span class="number">514377186877</span><span class="number">38749738666</span><span class="number">90789271986</span><span class="number">444475966143</span><span class="number">0581203968191</span><span class="number">67244785192</span><span class="number">67004300788</span><span class="number">557425939144</span><span class="number">981159359103</span><span class="number">07895353294</span><span class="number">248636886166</span><span class="number">86730576941</span><span class="number">558486845138</span><span class="number">45192300694</span><span class="number">948051154653</span><span class="number">978650811249</span><span class="number">2269023132159</span><span class="number">65734651041</span><span class="number">31139352795</span><span class="number">842230740351</span><span class="number">95641186265</span><span class="number">896121601476</span><span class="number">98231877343</span><span class="number">77536536744</span><span class="number">466202266207</span><span class="number">9504651155131</span><span class="number">146545699939</span><span class="number">635221156639</span><span class="number">378873719118</span><span class="number">43038869441</span><span class="number">1704129380147</span><span class="number">48757445666</span><span class="number">29677348566</span><span class="number">82651236462</span><span class="number">5322085058225</span><span class="number">989166345703</span><span class="number">2841257157472</span><span class="number">7237091103177</span><span class="number">520172301288</span><span class="number">37564348389</span><span class="number">11266041692149</span><span class="number">07394529684</span><span class="number">2283806640105</span><span class="number">32856035192</span><span class="number">192347991164</span><span class="number">1290699106368</span><span class="number">940828770132</span><span class="number">27870833636</span><span class="number">4931832489218</span><span class="number">392626104076</span><span class="number">925332968222</span><span class="number">76528391838</span><span class="number">068309583145</span><span class="number">31673739872</span><span class="number">770434529102</span><span class="number">40776751686</span><span class="number">07145268546</span><span class="number">179704294585</span><span class="number">74665438168</span><span class="number">76986532774</span><span class="number">1359024778105</span><span class="number">00149742633</span><span class="number">14822052363203</span><span class="number">713462159156</span><span class="number">52535573661</span><span class="number">58399986070</span><span class="number">211708143464</span><span class="number">98948600674</span><span class="number">968264315232</span><span class="number">633352812163</span><span class="number">379229005849</span><span class="number">65435931891</span><span class="number">2498319104287</span><span class="number">33996391581</span><span class="number">96176850657</span><span class="number">59057352199</span><span class="number">78688430899</span><span class="number">577115881584</span><span class="number">993630249153</span><span class="number">33084973956</span><span class="number">26069397868</span><span class="number">153836966450</span><span class="number">143042997562</span><span class="number">26150784872</span><span class="number">151805561207</span><span class="number">46037299561</span><span class="number">2548714898231</span><span class="number">186379079402</span><span class="number">72318482192178</span><span class="number">249364142958</span><span class="number">05234604367</span><span class="number">393330160159</span><span class="number">47696808580</span><span class="number">85148167433</span><span class="number">91358665407</span><span class="number">33859646708</span><span class="number">80099102846</span><span class="number">32672102709</span><span class="number">62895231787</span><span class="number">734588242952</span><span class="number">022413568189</span><span class="number">3813691027151</span><span class="number">972101383673</span><span class="number">51548743765</span><span class="number">7731962155204</span><span class="number">86250740338</span><span class="number">742254301381</span><span class="number">93909303198</span><span class="number">6877612026252</span><span class="number">157259306559</span><span class="number">995425852191</span><span class="number">907191176395</span><span class="number">31407039191</span><span class="number">76236398327</span><span class="number">789076753117</span><span class="number">59680540470</span><span class="number">40867078096</span><span class="number">72892947650</span><span class="number">374411366181</span><span class="number">04767137275</span><span class="number">66046873543</span><span class="number">168088385365</span><span class="number">690225678809</span><span class="number">255440449807</span><span class="number">868225101160</span><span class="number">1208702179193</span><span class="number">017940834188</span><span class="number">45692696279</span><span class="number">93873441533</span><span class="number">65737840462</span><span class="number">014941207704</span><span class="number">59273909203</span><span class="number">82572600062</span><span class="number">881895433246</span><span class="number">136490191987</span><span class="number">1399260237073</span><span class="number">9011536159335</span><span class="number">6521807191851</span><span class="number">95146780028</span><span class="number">40139366389</span><span class="number">170325887455</span><span class="number">09209958674</span><span class="number">7663861757211</span><span class="number">08475999309</span><span class="number">243880370077</span><span class="number">449317088169</span><span class="number">203381949063</span><span class="number">1368309197074</span><span class="number">175881702491</span><span class="number">429559806104</span><span class="number">50968566564</span><span class="number">466214031478</span><span class="number">512185159995</span><span class="number">825718851134</span><span class="number">46759583593</span><span class="number">30399863044</span><span class="number">117458807597</span><span class="number">92479064078</span><span class="number">234682309061</span><span class="number">995496643119</span><span class="number">28586176984</span><span class="number">41575442742</span><span class="number">90547809655</span><span class="number">744367389192</span><span class="number">72336647287</span><span class="number">85186772198</span><span class="number">41604606375</span><span class="number">770249838545</span><span class="number">02206160082</span><span class="number">85732271880</span><span class="number">7471642170067</span><span class="number">43837042339</span><span class="number">70099893977</span><span class="number">11312502100996</span><span class="number">837558234530</span><span class="number">440100532885</span><span class="number">919065223403</span><span class="number">426196533105</span><span class="number">88575977294</span><span class="number">79652082307</span><span class="number">95873071285</span><span class="number">041218647027</span><span class="number">99338329077</span><span class="number">138179764063</span><span class="number">991141253371</span><span class="number">66792439075</span><span class="number">8972456675241</span><span class="number">83080328357</span><span class="number">58276293802</span><span class="number">32259892083</span><span class="number">54864792497</span><span class="number">45673876151</span><span class="number">381033175468</span><span class="number">643849198106</span><span class="number">82748368299</span><span class="number">37209688973</span><span class="number">88691473462</span><span class="number">416187285158</span><span class="number">49108264697</span><span class="number">062215103370</span><span class="number">898726156080</span><span class="number">05806039102</span><span class="number">132374072983</span><span class="number">71138178433</span><span class="number">2747381880101</span><span class="number">72794200699</span><span class="number">34480134089</span><span class="number">86684039103</span><span class="number">72201830280</span><span class="number">41985808709</span><span class="number">1461108905080</span><span class="number">80057879206</span><span class="number">20751366206676</span><span class="number">827287515162</span><span class="number">9201329231660</span><span class="number">37412141806138</span><span class="number">385760817107</span><span class="number">870800178181</span><span class="number">00151757802</span><span class="number">27986701448</span><span class="number">01426667174</span><span class="number">8382104107707</span><span class="number">961806789153</span><span class="number">93002346747</span><span class="number">0851566140496</span><span class="number">448669076211</span><span class="number">49490850960</span><span class="number">69463845639</span><span class="number">06765748532</span><span class="number">023402827147</span><span class="number">89726286568</span><span class="number">88114821716109</span><span class="number">287424980100</span><span class="number">72641562637</span><span class="number">3522389558136</span><span class="number">31540172542</span><span class="number">40459347291</span><span class="number">071479153879</span><span class="number">39150183766</span><span class="number">734155063987</span><span class="number">01092549685</span><span class="number">96726286055</span><span class="number">248086161960</span><span class="number">672114746679</span><span class="number">31379841050</span><span class="number">82382641030</span><span class="number">274143296887</span><span class="number">52870941681</span><span class="number">725183059979</span><span class="number">248169609745</span><span class="number">52087898937</span><span class="number">1886860172390</span><span class="number">90850708699</span><span class="number">77875077382</span><span class="number">078819314248</span><span class="number">1965002130499</span><span class="number">345301231196</span><span class="number">17988141563245</span><span class="number">158957308755</span><span class="number">72904076256</span><span class="number">563201797555</span><span class="number">48575790034</span><span class="number">49758750327</span><span class="number">1483232979626</span><span class="number">964971211783</span><span class="number">64448804904</span><span class="number">355811875110</span><span class="number">58091265190</span><span class="number">398162242990</span><span class="number">27970395883</span><span class="number">44160060065</span><span class="number">770225257664</span><span class="number">2474204671236</span><span class="number">5481810668216</span><span class="number">074540940126</span><span class="number">107756379335</span><span class="number">36443188275</span><span class="number">41509787698</span><span class="number">170928807878</span><span class="number">75803289449</span><span class="number">564079251871</span><span class="number">0453221486253</span><span class="number">799714335115</span><span class="number">83486085363</span><span class="number">61302349190</span><span class="number">3511686867225</span><span class="number">66841182246</span><span class="number">93807155946</span><span class="number">194134537189</span><span class="number">02752785998</span><span class="number">30226961984</span><span class="number">1643150937582</span><span class="number">2323044275254</span><span class="number">856160499863</span><span class="number">229127666527</span><span class="number">26001830660</span><span class="number">847207171689</span><span class="number">01181260005</span><span class="number">852986218095</span><span class="number">455322133194</span><span class="number">926803212203</span><span class="number">00629733634</span><span class="number">896147990151</span><span class="number">40771004984</span><span class="number">98740498528</span><span class="number">42307126727</span><span class="number">456377883192</span><span class="number">44380086907</span><span class="number">121788590294</span><span class="number">79604558868</span><span class="number">089889188837</span><span class="number">155936466253</span><span class="number">71070094090</span><span class="number">31463075695</span><span class="number">1245211507275</span><span class="number">71484651406</span><span class="number">435019170401</span><span class="number">088253268796</span><span class="number">139992962744</span><span class="number">682407169836</span><span class="number">93629082333</span><span class="number">692876279125</span><span class="number">10252552169593</span><span class="number">82592476971</span><span class="number">07463669775</span><span class="number">27481364704</span><span class="number">55774428529</span><span class="number">91765373159</span><span class="number">611340112989</span><span class="number">96968998358</span><span class="number">46125887542</span><span class="number">62941480462</span><span class="number">9616331892150</span><span class="number">26246793955</span><span class="number">097438678211</span><span class="number">00360674297</span><span class="number">443610384189</span><span class="number">21559621461145</span><span class="number">93469789644</span><span class="number">1867174832403</span><span class="number">930276484240</span><span class="number">02883334829</span><span class="number">163556004304</span><span class="number">91997034979</span><span class="number">31689435832</span><span class="number">35296186986</span><span class="number">09656233087</span><span class="number">57699928304</span><span class="number">48240806037</span><span class="number">940499210544</span><span class="number">79752978405</span><span class="number">360235262762</span><span class="number">231784651160</span><span class="number">51205867805</span><span class="number">225403852882</span><span class="number">402162234442</span><span class="number">896268707184</span><span class="number">153772974307</span><span class="number">89630331104</span><span class="number">04084701793</span><span class="number">852646216972</span><span class="number">04194758526</span><span class="number">142155279563</span><span class="number">967518016142</span><span class="number">750977249782</span><span class="number">29945146427</span><span class="number">96557003051</span><span class="number">61574941069</span><span class="number">548230563646</span><span class="number">601304663130</span><span class="number">1858458135397</span><span class="number">381669232036</span><span class="number">45861091999</span><span class="number">2480101570031</span><span class="number">927925943167</span><span class="number">83373636645</span><span class="number">887680710184</span><span class="number">474647195845</span><span class="number">00789309241</span><span class="number">1554490187996</span><span class="number">895142756349</span><span class="number">063691842189</span><span class="number">908528700191</span><span class="number">2396114332146</span><span class="number">231494340185</span><span class="number">79099667452</span><span class="number">00542455243</span><span class="number">057067195061</span><span class="number">642665702142</span><span class="number">971330229403</span><span class="number">84654551464</span><span class="number">65228840755</span><span class="number">62168444341</span><span class="number">050979552220</span><span class="number">84470899333</span><span class="number">122928703380</span><span class="number">27703840631</span><span class="number">52109064598</span><span class="number">890637906148</span><span class="number">41799134355</span><span class="number">539339667231</span><span class="number">5651756183871</span><span class="number">174196170092</span><span class="number">215069787055</span><span class="number">55601662149</span><span class="number">884070166503</span><span class="number">10825162180147</span><span class="number">096512177344</span><span class="number">815160681331</span><span class="number">91656473597</span><span class="number">6512312160696</span><span class="number">756445086192</span><span class="number">65209284456</span><span class="number">40092467476</span><span class="number">44040240158</span><span class="number">095795356122</span><span class="number">808478702162</span><span class="number">93693782771</span><span class="number">94465453687</span><span class="number">662047287138</span><span class="number">780177000936</span><span class="number">196402093</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>斐波那契数列是有一个传奇的数学家基于一对非常能生的兔子提出的（喜欢数学游戏的卖兔子的商人？）：一对兔子每个月能生出一对小兔子来。如果所有兔都不死，那么一年以后可以繁殖多少对兔子？每个月兔子数量最终构成了一个了一个神奇的数列，这数列中除了第零项和第一项，其他所有的项都等于前面两项之和：<code>F(n) = F(n-1) + F(n-2)</code><br>]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[假币问题]]></title>
    <link href="http://luoyuan800.github.io/2017/01/03/coin/"/>
    <id>http://luoyuan800.github.io/2017/01/03/coin/</id>
    <published>2017-01-03T08:19:43.000Z</published>
    <updated>2017-02-09T06:13:13.012Z</updated>
    <content type="html"><![CDATA[<p>有一堆硬币，里面有一个假币，如何通过称重的方式尽快找出这个假币呢。<a id="more"></a></p>
<p>这个问题有两种不同难度的版本</p>
<h2 id="已经假币质量比真币轻（重）">已经假币质量比真币轻（重）</h2><p>常规的解题思路是将硬币分成两队，然后称重，那么假币就在较轻的那一堆，接下来只要继续对较轻的那一堆再继续分成两堆进行称重，知道找出假币。当然，有一个需要额处理的情况就是如果硬币数量是奇数的话，分成两堆后，会多出一个硬币，如果分出的两堆重量，一样，那么多出的那个硬币就是假币了。</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">int</span> findByDivide2WhenForgeLighter(Coin[] coins) &#123;</span><br><span class="line">    <span class="keyword">if</span> (coins.<span class="built_in">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (coins.<span class="built_in">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> divide = divide2(coins.<span class="built_in">length</span>);</span><br><span class="line">    <span class="keyword">int</span> end = coins.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (coins.<span class="built_in">length</span> % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        end = coins.<span class="built_in">length</span> - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> total = total(<span class="number">0</span>, divide - <span class="number">1</span>, coins);<span class="comment">//total方法是对指定的硬币进行称重，当然在代码的实现里面就是将所有硬币的数量加起来，这里不再赘述</span></span><br><span class="line">    <span class="keyword">int</span> total1 = total(divide, end, coins);</span><br><span class="line">    <span class="keyword">if</span> (total &lt; total1) &#123;</span><br><span class="line">        <span class="keyword">return</span> findByDivide2WhenForgeLighter(Arrays.copyOfRange(coins, <span class="number">0</span>, divide));<span class="comment">//递归</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; total1) &#123;</span><br><span class="line">        <span class="keyword">return</span> findByDivide2WhenForgeLighter(Arrays.copyOfRange(coins, divide, end));<span class="comment">//递归</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coins.<span class="built_in">length</span> % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果硬币的个数是奇数的话，那么分堆后肯定会多出来一个硬币，如果分出来的两堆硬币重量一样，这个多出来的就肯定是假币</span></span><br><span class="line">        <span class="keyword">return</span> coins.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中分堆的方法可以定义成如下</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">int</span> divide2(<span class="keyword">int</span> <span class="built_in">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是偶数的话直接分成等量的两堆</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">length</span> / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果是奇数的话，取掉最后一个硬币后再进行分（其实就是分成了三堆，其中一堆只有一个）</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">length</span> - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然我们还可以使用另外一种进阶的方式，就是分成三堆，分成三堆可以实现，称重一次排除掉两堆，平均的情况下可以实现每次称重后都将硬币的规模缩减为原来的1/3。这样可以大幅度的减少称重的次数，特别是硬币比较多的时候。代码实现如下。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int findByDivide3WhenFakeLighter<span class="params">(Coin[] conins)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(conins.length &lt;= <span class="number">1</span>)</span> &#123;</span><br><span class="line">        return conins.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int[] divides = divide3<span class="params">(conins.length)</span>;</span><br><span class="line">    int total1 = total<span class="params">(<span class="number">0</span>, divides[<span class="number">0</span>] - <span class="number">1</span>, conins)</span>;</span><br><span class="line">    int total2 = total<span class="params">(divides[<span class="number">0</span>], divides[<span class="number">1</span>] - <span class="number">1</span>, conins)</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(total1 &lt; total2)</span> &#123;<span class="comment">//假币在第一堆（比较轻）</span></span><br><span class="line">        return findByDivide3WhenFakeLighter<span class="params">(Arrays.copyOfRange<span class="params">(conins, <span class="number">0</span>, divides[<span class="number">0</span>])</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="params">(total1 &gt; total2)</span> &#123;<span class="comment">//假币在第二堆</span></span><br><span class="line">        return findByDivide3WhenFakeLighter<span class="params">(Arrays.copyOfRange<span class="params">(conins, divides[<span class="number">0</span>], divides[<span class="number">1</span>])</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//假币在第三堆</span></span><br><span class="line">        return findByDivide3WhenFakeLighter<span class="params">(Arrays.copyOfRange<span class="params">(conins, divides[<span class="number">1</span>], conins.length)</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中分堆的算法实现如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回的数组[0]是第一堆的结束位置，[1]是第二堆的结束位置</span></span><br><span class="line"><span class="comment">//特别处理当硬币个数只有两个的时候，只分成两堆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] divide3(<span class="built_in">int</span> length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">size</span> = length / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="built_in">size</span>, <span class="number">2</span> * <span class="built_in">size</span>&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上面提到的都是用减量递归的方式查找假币，下面尝试使用迭代的算法来实现一个分两堆的代码（分成三堆的实现模式差不多，不再赘述）。算法重只需要根据重量来改变指示剩余硬币的数量，基本的实现基础是剩下的硬币在代码中使用的存储是连续的。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">findByDivide2WhenForgeLighterIteration</span><span class="params">(Coin[] coins)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newStart = <span class="number">0</span>, newEnd = coins.length -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//两个指针之间的硬币就是剩余的硬币</span></span><br><span class="line">    <span class="keyword">while</span> (newStart != newEnd) &#123;</span><br><span class="line">        <span class="keyword">int</span> divide = divide2(newEnd - newStart + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> total1 = total(newStart, newStart + divide, coins);</span><br><span class="line">        <span class="keyword">int</span> total2 = total(newStart + divide, newEnd, coins);</span><br><span class="line">        <span class="keyword">if</span>(total1 == total2)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(total1 &gt; total2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将第一个指针往后移动到划分的位置</span></span><br><span class="line">            newStart += divide;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//将第二个指针往前移动</span></span><br><span class="line">            newEnd = newStart + divide;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newStart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不知道假币是比较轻还是比较重">不知道假币是比较轻还是比较重</h2><h3 id="分两堆">分两堆</h3><p>如果不知道假币重量的情况下，分两堆的算法也是可以做到的：</p>
<ul>
<li>等分两堆</li>
<li>如果刚刚好分成两堆（偶数），随机选择一堆再进行等分，然后进行称重，如果一样的话，那么假币肯定在第二堆，就可以舍弃第一堆后再对余下的硬币重复以上步骤。</li>
<li>如果是奇数，对分好的两堆称重，如果相等，那么多出来的那个就是假币，否则随机选择一堆再进行等分，然后进行称重分析（参考前面步骤）。</li>
</ul>
<h3 id="分三堆">分三堆</h3><p>在这里实现一个分三堆的算法（感觉逼格比较高）。实现思路是，分三堆，其中第一堆和第二堆个数相同，第三堆是分完两堆后余下的硬币。然后对第一堆和第二堆的重量进行比较，如果相同，那么假币肯定在第三堆，如果不相同，那么排除第三堆，混合第一堆和第二堆后重新分成三堆进行称重分析。</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">int</span> findByDivide3WithUnknownWeight(Coin[] coins) &#123;</span><br><span class="line">    <span class="keyword">if</span> (coins.<span class="built_in">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> coins.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] divides = divide3(coins.<span class="built_in">length</span>);</span><br><span class="line">    <span class="keyword">int</span> total1 = total(<span class="number">0</span>, divides[<span class="number">0</span>] - <span class="number">1</span>, coins);</span><br><span class="line">    <span class="keyword">int</span> total2 = total(divides[<span class="number">0</span>], divides[<span class="number">1</span>] - <span class="number">1</span>, coins);</span><br><span class="line">    <span class="keyword">if</span> (total1 == total2) &#123;</span><br><span class="line">        <span class="keyword">return</span> findByDivide3WithUnknownWeight(Arrays.copyOfRange(coins, divides[<span class="number">1</span>], coins.<span class="built_in">length</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findByDivide3WithUnknownWeight(Arrays.copyOfRange(coins, <span class="number">0</span>, divides[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分堆用到的算法和之前的一样，可以应付个数不是三的倍数时候的情况。<br>这个算法的效率其实可以通过挑战第一堆和第二堆硬币数量的个数来进一步优化。在此不再赘述。</p>
<h3 id="迭代算法">迭代算法</h3><p>当然还是要弄个非递归的算法来炫耀一下技术滴（分三堆）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int findByDivide3WithUnknownWeightIteration(Coin[] coins) &#123;</span><br><span class="line">    int <span class="operator"><span class="keyword">start</span> = <span class="number">0</span>;</span></span><br><span class="line">    int <span class="operator"><span class="keyword">end</span> = coins.length - <span class="number">1</span>;</span></span><br><span class="line">    while (<span class="operator"><span class="keyword">start</span> != <span class="keyword">end</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] divides = divide3(<span class="keyword">end</span> + <span class="number">1</span> - <span class="keyword">start</span>);</span></span><br><span class="line">        int total1 = total(0, divides[0] - 1, coins);</span><br><span class="line">        int total2 = total(divides[0], divides[1] - 1, coins);</span><br><span class="line">        if (total1 == total2) &#123;</span><br><span class="line">        //舍弃前面的（选择第三堆进行接下来的分析）</span><br><span class="line">            <span class="operator"><span class="keyword">start</span> = divides[<span class="number">1</span>];</span></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        //排除第三堆里的硬币，并且将前两堆重新划分成三堆</span><br><span class="line">            <span class="operator"><span class="keyword">end</span> = divides[<span class="number">1</span>];</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="operator"><span class="keyword">start</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>有一堆硬币，里面有一个假币，如何通过称重的方式尽快找出这个假币呢。]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[名人问题]]></title>
    <link href="http://luoyuan800.github.io/2017/01/03/names/"/>
    <id>http://luoyuan800.github.io/2017/01/03/names/</id>
    <published>2017-01-03T08:19:43.000Z</published>
    <updated>2017-02-09T06:12:27.645Z</updated>
    <content type="html"><![CDATA[<p>有这么一个算法题目：假设一堆人中有一个人可能是名人（明星），也有可能这人群中没有名人，名人满足的条件是人群中所有人都认识他，但是他不认识其他人，我们可以通过询问每个人来找出这个名人，那么假设我们只能问某个人是否认识另外一个这样的问题，得到回答也只能是认识或者不认识这两种回答，求解我们最多问多少次可以找出这个名人？<a id="more"></a><br>首先我们分析这个题目可以得出，如果人群中存在这个名人，那么只能有一个，因为他要同时满足不认识所有人，又同时被所有人认识。首先我们考虑最直接的方式，询问没一个人，然后找出那个不认识所有人的家伙，我们可以假设他就是那个名人。算法大概描述为：</p>
<ul>
<li>随机选择一个人</li>
<li>然后在剩下的人中随机选择一个人，问先选出的那个人是否认识后选出的那个人</li>
<li>如果不认识，那么我们再选出一个人来继续问直到找到认识的那个人</li>
<li>如果认识，那么这个先选出的人肯定就不是名人了，我们可以找下一个人然后回到第4步继续</li>
<li>当我们找到一个人他不认识所有人的时候，这个人就可能是名人<br>用个伪代码方式来描述这个算法，首先定义一个数组，用来存储所有人。</li>
</ul>
<pre><code><span class="keyword">def</span> <span class="keyword">find</span>(Array A){
    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;<span class="comment">//两个标记位用来表示当前选出的人</span>
    <span class="keyword">while</span>(j&lt;A.legth){
        <span class="keyword">if</span>(A[i] known A[j]){<span class="comment">//如果认识别人，排除他的嫌疑</span>
            i=j;j++; <span class="comment">//直接选择下一个人作为嫌犯进行下一轮询问</span>
        }<span class="keyword">else</span>{
            j++;<span class="comment">//如果不认识，继续往下找</span>
        }
    }
    <span class="keyword">return</span> A[i];
}
</code></pre><p>这个算法我们只需要询问n-1次就可以找出一个人，但是请注意这个算法并不正确，因为这个算法只能找到一个疑似名人的家伙，我们暂时称呼他为嫌疑人。这个算法找出的疑犯只能保证他不认识在他之后的人，但不能保证其他人都认识他或者他不认识在他之前的人。所以当我们用这个算法找出嫌疑人之后，我们需要再回去问所有的人是否都认识他。</p>
<pre><code>def findFamous(Array <span class="literal">A</span>){
    int n = <span class="number">0</span><span class="comment">;</span>
    <span class="keyword">while</span>(n &lt; <span class="literal">A</span>.length){
        int i = n ++, j = i+<span class="number">1</span><span class="comment">;</span>
        <span class="keyword">while</span>(j &lt; <span class="literal">A</span>.length){
            <span class="keyword">if</span>(<span class="literal">A</span>[i] known <span class="literal">A</span>[j]){//如果认识别人，排除他的嫌疑
                i=j<span class="comment">;j++; //直接选择下一个人作为嫌犯进行下一轮询问</span>
            }<span class="keyword">else</span>{
                j++<span class="comment">;//如果不认识，继续往下找</span>
            }
        }
        int k = <span class="number">0</span><span class="comment">;</span>
        <span class="keyword">while</span>(k&lt; <span class="literal">A</span>.length){
            <span class="keyword">if</span>(<span class="literal">A</span>[k] != <span class="literal">A</span>[i] &amp;&amp; !<span class="literal">A</span>[k] known <span class="literal">A</span>[i]){ 
            //只要有一个人不认识他，那么就排除嫌疑
                <span class="keyword">break</span><span class="comment">;//选择下一个人重新开始找嫌疑人</span>
            } <span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">A</span>[k] != <span class="literal">A</span>[i] &amp;&amp; k==<span class="literal">A</span>.length - <span class="number">1</span>){
            //所有人都认识他了（已经询问完所有人）
                <span class="keyword">return</span> <span class="literal">A</span>[i]<span class="comment">;</span>
            }
            k++<span class="comment">;</span>
        }
    }
}
</code></pre><p>分析一下这个算法的最差效率为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(n^&#123;2&#125;)</span><br></pre></td></tr></table></figure></p>
<p>最差的情况就是这群人中没有名人，并且所有人之间都互相不认识，那么就会导致我们问问题的数量为指数值，具体的数值为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n(n-1)/2 + n(n-1) = 3n(n-1)/2</span><br></pre></td></tr></table></figure>
<p>那么我们开考虑其他的解法，尝试引入一些数学概念，因为我是在学习图论的时候翻到了这个问题，所以我觉得我可以尝试用图的概念来对人群进行建模，那么找出名人的问题就可以变成找出那个出度为零并且入度为n-1的节点。我们对所有的节点进行广度优先的遍历，找出出度为零的节点，然后对这些节点计算入度，当找到入度为n-1的节点时返回结果，或者找不到的时候，返回无名人的结果。在这里我们需要注意到一点的是，如果存在名人的话，那么出度为零的节点应该只有一个，那么只要我们找到一个出度为零的节点的时候，我们就可以不用在继续找其他的节点了，只需要判断这个节点是否符合入度为n-1的条件即可。</p>
<pre><code>def findFamousByBSF(Array nodes){
    <span class="keyword">int</span> famous = -<span class="number">1</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peoples.<span class="built_in">length</span>; i++) {
    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; peoples.<span class="built_in">length</span>; j++) {
        <span class="keyword">if</span> (nodes[i] to nodes[j] == <span class="number">1</span>) {
            <span class="keyword">break</span>;
        } <span class="keyword">else</span> <span class="keyword">if</span> (j == peoples.<span class="built_in">length</span> - <span class="number">1</span>) {
        <span class="comment">//只要是不认识所有人，那么就有嫌疑</span>
            famous = i;
        }
    }
    }
    <span class="keyword">if</span> (famous != null) {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peoples.<span class="built_in">length</span>; i++) {
            <span class="keyword">if</span> (i != famous &amp;&amp; nodes[i] to nodes[famous] == <span class="number">0</span>) {
            <span class="comment">//只要有一个人不认识他，排除嫌疑</span>
                famous = -<span class="number">1</span>;
                <span class="keyword">break</span>;
            }
        }
    }
    <span class="keyword">if</span>(famous &gt; <span class="number">0</span>){
        <span class="keyword">return</span> nodes[famous];
    }<span class="keyword">else</span>{
        <span class="keyword">return</span> null;
    }
}
</code></pre><p>分析这个算法，最坏的情况下需要询问问题的次数为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n-1)^2 + n-1 = n(n-1)</span><br></pre></td></tr></table></figure>
<p>虽然算法的时间效率依旧是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(n^2)</span><br></pre></td></tr></table></figure>
<p>但是一个简单的建模构思，就让我们在最坏情况下询问问题的次数减少了很多，即使时间效率相同也是一种改进。<br>那么既然使用到了图，那么不妨考虑下通过邻接矩阵来求解这个题目。我们定义两个节点之间，如果A 认识B，那么A-&gt;B的权值定义为1，否则定义为0，那么如果存在名人，那么名人节点对所有节点的权值之和为0，而其他节点对他的节点权值之和应该为n-1。使用一个二维数组来存储邻接矩阵，我们需要询问<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n-1)^2</span><br></pre></td></tr></table></figure></p>
<p>来构建这个邻接矩阵，之后，就是权值计算的过程了，而再进行额外的提问了。</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def findFamousAdjacentMatrix(Array A) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] matrix = new <span class="keyword">int</span>[A.<span class="built_in">length</span>][A.<span class="built_in">length</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; A.<span class="built_in">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i].known(A[j])) &#123;</span><br><span class="line">                matrix[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//构建完成</span></span><br><span class="line">    <span class="comment">//开始计算权值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">out</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//首先计算出度之和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : matrix[i]) &#123;</span><br><span class="line">            <span class="keyword">out</span> += value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">out</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">in</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//计算入度之和</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix.<span class="built_in">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">in</span> += matrix[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">in</span> == A.<span class="built_in">length</span> - <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> A[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来对这三个算法进行分析可以发现在算法时间效率均为<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(n^2)</span><br></pre></td></tr></table></figure></p>
<p>在最差情况下，询问问题次数最少的为邻接矩阵算法（我们忽略掉对邻接矩阵进行权值求和的消耗）。<br>但是在最优情况下（第一个人就是名人），前两个算法均为2(n-1)，邻接矩阵算法依旧是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n-1)^2</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>有这么一个算法题目：假设一堆人中有一个人可能是名人（明星），也有可能这人群中没有名人，名人满足的条件是人群中所有人都认识他，但是他不认识其他人，我们可以通过询问每个人来找出这个名人，那么假设我们只能问某个人是否认识另外一个这样的问题，得到回答也只能是认识或者不认识这两种回答，求解我们最多问多少次可以找出这个名人？]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[勇者闯迷宫]]></title>
    <link href="http://luoyuan800.github.io/2016/10/31/maze_never_end/"/>
    <id>http://luoyuan800.github.io/2016/10/31/maze_never_end/</id>
    <published>2016-10-31T02:00:01.000Z</published>
    <updated>2016-11-01T01:38:19.902Z</updated>
    <content type="html"><![CDATA[<p>自己写的一个小游戏<a id="more"></a></p>
<blockquote>
<h2 id="勇者闯迷宫">勇者闯迷宫</h2></blockquote>
<p>Android 二维码下载</p>
<p><img src="http://7xk7ce.com1.z0.glb.clouddn.com/maze_download.png" alt="二维码"> </p>
<p><a href="http://bmob-cdn-5020.b0.upaiyun.com/2016/11/01/b00bc9324054c7fe8039f23735c83198.apk" target="_blank" rel="external">Androd下载</a></p>
<hr>
<ul>
<li>勇者闯迷宫浴火归来，更加合理的数据设计，更加多的怪物，更加坚固的作弊检测。</li>
<li>剧情：是谁建造了迷宫，是谁把主人公丢在这个迷宫里，为什么有那么多稀奇古怪的怪物，是谁在背后操控着主角的命运，那些神经兮兮的NPC又是谁，残缺的文档隐藏着什么样的历史？</li>
<li>玩法：一款放置类的冒险游戏。自由PK，万人同服，完全免费。<strong>宠物</strong>培养，宠物竞技，宠物排行，离线挂机。完全自由的<strong>装备打造</strong>系统，任意搭配的技能组合。你想得到的，都可以玩到，如果没有，告诉我，更新给你加上去！持续更新各种游戏内容，欢迎您的建议！</li>
<li>欢迎加群 543177861</li>
</ul>
<hr>
<h2 id="玩家自定义装备、宠物展示">玩家自定义装备、宠物展示</h2><h2 id=""><img src="http://7xk7ce.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720161031112323.jpg" alt="装备自定义"><img src="http://7xk7ce.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720161031112341.jpg" alt="装备自定义"> <img src="http://7xk7ce.com1.z0.glb.clouddn.com/QQ%E5%9B%BE%E7%89%8720161031112405.jpg" alt="宠物培育"></h2><h3 id="更新日志">更新日志</h3><h5 id="3-4_更新_2016-10-29">3.4 更新 2016-10-29</h5><ul>
<li>增加宠物排名争夺</li>
<li>增加十二生肖相关宠物</li>
</ul>
<h5 id="3-3-7_更新_2016-10-23">3.3.7 更新 2016-10-23</h5><ul>
<li>增加装备（饰品）升级系统</li>
</ul>
<h5 id="3-3-5_更新_2016-09-26">3.3.5 更新 2016-09-26</h5><ul>
<li>增加宠物升级功能</li>
</ul>
<h5 id="3-3-2_更新_2016-09-17">3.3.2 更新 2016-09-17</h5><ul>
<li>增加双倍锻造、加快游戏速度的道具</li>
</ul>
<h5 id="3-3_更新_2016-09-09">3.3 更新 2016-09-09</h5><ul>
<li>增加宠物特殊进化</li>
<li>增加20多种伊布</li>
</ul>
<h5 id="3-0_更新_2016-08-24">3.0 更新 2016-08-24</h5><ul>
<li>增加宠物进化的功能</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己写的一个小游戏]]>
    
    </summary>
    
      <category term="杂物" scheme="http://luoyuan800.github.io/categories/%E6%9D%82%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PipedOutputStream和PipedInputStream]]></title>
    <link href="http://luoyuan800.github.io/2016/10/30/piped-in-out/"/>
    <id>http://luoyuan800.github.io/2016/10/30/piped-in-out/</id>
    <published>2016-10-30T02:31:14.000Z</published>
    <updated>2016-10-28T02:32:29.961Z</updated>
    <content type="html"><![CDATA[<p>关于PipedOutputStream和PipedInputStream的一些使用问题。<a id="more"></a></p>
<h2 id="PipedOutputStream和PipedInputStream的用处">PipedOutputStream和PipedInputStream的用处</h2><p>当需要同时处理输入和输出的时候，可以尝试使用Piple实现类似于生产者和消费者的角色功能。其中Pipe的OutputStream是生产组，用来接受数据并且写入Piple中，PipedInputStream类似消费者，从Pipe中读取数据。所以在PipedInputStream和PipedOutPutStream源代码中可以看到变量和方法的命名都是和writer和receiver相关的。</p>
<h2 id="用法">用法</h2><p>一般来说我们需要使用两个线程分别处理Output和Input，就是说要在两个不同的线程中使用PipedOutputStream和PipedInputStream。<br>使用 <code>PipledOutputStream.connect(PipedInputStream)</code> 将两个管道连接在以前，这样PipedOutputStream会在接受到数据时调用PipedInputStream的receive方法从而实现将数据写入管道中。</p>
<h2 id="常见错误信息">常见错误信息</h2><h3 id="IOException(“Pipe_not_connected”)">IOException(“Pipe not connected”)</h3><p>如果只是实例化了PipedInputStream，但是没有调用connect方法（调用PipedInputStream 和PipedOutputStream的connect方法都是一样的效果），就会在InoutStream.read()方法中抛出这个异常。</p>
<h3 id="IOException(“Pipe_closed”)">IOException(“Pipe closed”)</h3><p>如果PipedOutputStream调用了close方法之后，InputStream还是继续调用read()方法就会抛出这个异常。</p>
<h3 id="IOException(“Write_end_dead”)">IOException(“Write end dead”)</h3><p>如果执行OutputStream的线程已经执行结束，但是没有调用PipedOutStream.close()。那么InputStream.read()方法就会抛出这个异常。解决方法就是负责生产数据的线程在执行完成之后应该马上调用PipedOutputStream.close()。</p>
<h3 id="IOException(“Pipe_broken”)">IOException(“Pipe broken”)</h3><p>这个异常在多线程同时执行才会发生的典型错误，并且发生带有一定的偶然性。当PipedInputStream正在执行read()方法的时候，负责生产数据（持有PipedOutputStream）的线程执行结束了，但是并没有在线程结束的时候调用OutputStream的close方法，那么就有可能导致这个异常发生。</p>
<h2 id="如何正确使用">如何正确使用</h2><ol>
<li>首先必须要有两个线程分别负责PipedInputStream和PipedOutputStream</li>
<li>最好能在各自线程执行结束的时候关闭各自负责的Stream</li>
<li>在负责生成数据的线程执行完成之后一定要马上关闭PipedOutputStream</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于PipedOutputStream和PipedInputStream的一些使用问题。]]>
    
    </summary>
    
      <category term="编程-Linux/Unix" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Linux-Unix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Groovy中unique方法性能分析]]></title>
    <link href="http://luoyuan800.github.io/2016/09/26/groovy_unique_performance/"/>
    <id>http://luoyuan800.github.io/2016/09/26/groovy_unique_performance/</id>
    <published>2016-09-26T02:59:21.000Z</published>
    <updated>2016-09-26T03:02:13.972Z</updated>
    <content type="html"><![CDATA[<p>最近发现使用Groovy中的集合去重unique方法似乎会导致运行时间变长。身为一个java程序员一直比较习惯用HashSet去过滤重复的数据，看到groovy中有这么一个去重复的方法，觉得挺方便，所以就很开心的用上了。但是测试以后发现，这个方法性能真的是很差劲的…… <a id="more"></a></p>
<h2 id="数字列表的去重">数字列表的去重</h2><h3 id="测试代码">测试代码</h3><p>首先是测试数值的比较，我以下代码分别测速list的大小为100， 10000， 1000000。</p>
<pre><code>random = new Random<span class="params">()</span>;
performanceReport<span class="params">(<span class="number">100</span>)</span>
performanceReport<span class="params">(<span class="number">10000</span>)</span>
performanceReport<span class="params">(<span class="number">10000000</span>)</span>
def performanceReport<span class="params">(int size)</span> {
    println<span class="params">(<span class="string">"Report for list size $size"</span>)</span>
    def list = [];
    <span class="params">(<span class="number">1</span>..size)</span>.each {
        list.add<span class="params">(random.nextInt<span class="params">(<span class="number">1000</span>)</span>)</span>
    }
    def start = System.currentTimeMillis<span class="params">()</span>;
    list.unique<span class="params">()</span>;
    def end = System.currentTimeMillis<span class="params">()</span>;
    def dur = end - start;
    dur /= <span class="number">1000</span>;
    println<span class="params">(<span class="string">"unique use time $dur s"</span>)</span>;
    list.clear<span class="params">()</span>;
    <span class="params">(<span class="number">1</span>..size)</span>.each {
        list.add<span class="params">(random.nextInt<span class="params">(<span class="number">1000</span>)</span>)</span>
    }
    start = System.currentTimeMillis<span class="params">()</span>;
    def uSet = new HashSet<span class="params">(list.size<span class="params">()</span>)</span>;
    <span class="keyword">for</span> <span class="params">(e in list)</span> {
        uSet.add<span class="params">(e)</span>;
    }
    end = System.currentTimeMillis<span class="params">()</span>;
    dur = end - start;
    dur /= <span class="number">1000</span>;
    println<span class="params">(<span class="string">"hash set use time $dur s"</span>)</span>;
    println<span class="params">('---------------------')</span>;
}
</code></pre><h3 id="测试结果">测试结果</h3><pre><code><span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 100
unique <span class="keyword">use</span> time 0.006 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.006 <span class="literal">s</span>
---------------------
<span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 10000
unique <span class="keyword">use</span> time 0.127 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.004 <span class="literal">s</span>
---------------------
<span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 10000000
unique <span class="keyword">use</span> time 49.479 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.279 <span class="literal">s</span>
</code></pre><p>我重复运行了代码三遍，出来的结果都差不多，所以对比结果基本是确定的：</p>
<ol>
<li>List比较少元素的情况下，比如100以内，运行效率差不了多少</li>
<li>当List元素较多的时候，差异非常明显，特别是大容量List的运行结果，使用unique就绝对是一个错误的选择！</li>
</ol>
<h2 id="字符串列表的去重">字符串列表的去重</h2><h3 id="测试代码-1">测试代码</h3><p>我使用随机生成的十位英文字符串（只包含a、b、c）进行测试比较。测试运行比较列表大小为100、1000、100000的结果。</p>
<pre><code>random = new Random<span class="params">()</span>;
strings = ['a', 'b', 'c'];
performanceReport<span class="params">(<span class="number">100</span>)</span>
performanceReport<span class="params">(<span class="number">1000</span>)</span>
performanceReport<span class="params">(<span class="number">100000</span>)</span>
<span class="comment">//生成随机字符串</span>
def genString<span class="params">()</span>{
    def s = '';
    <span class="params">(<span class="number">1</span>..<span class="number">4</span>)</span>.each{
        def index = random.nextInt<span class="params">(strings.size<span class="params">()</span>)</span>;
        s += strings[index];
    }
    return s;
}
def performanceReport<span class="params">(int size)</span> {
    println<span class="params">(<span class="string">"Report for list size $size"</span>)</span>
    def list = [];
    <span class="params">(<span class="number">1</span>..size)</span>.each {
        list.add<span class="params">(genString<span class="params">()</span>)</span>
    ｝
    def start = System.currentTimeMillis<span class="params">()</span>;
    list.unique<span class="params">()</span>;
    def end = System.currentTimeMillis<span class="params">()</span>;
    def dur = end - start;
    dur /= <span class="number">1000</span>;
    println<span class="params">(<span class="string">"unique use time $dur s"</span>)</span>;
    list.clear<span class="params">()</span>;
    <span class="params">(<span class="number">1</span>..size)</span>.each {
        list.add<span class="params">(genString<span class="params">()</span>)</span>
    }
    start = System.currentTimeMillis<span class="params">()</span>;
    def uSet = new HashSet<span class="params">(list.size<span class="params">()</span>)</span>;
    <span class="keyword">for</span> <span class="params">(e in list)</span> {
        uSet.add<span class="params">(e)</span>;
    }
    end = System.currentTimeMillis<span class="params">()</span>;
    dur = end - start;
    dur /= <span class="number">1000</span>;
    println<span class="params">(<span class="string">"hash set use time $dur s"</span>)</span>;
    println<span class="params">('---------------------')</span>;
}
</code></pre><h3 id="测试结果-1">测试结果</h3><p>重复运行代码三遍，发现结果对比的差值都比较固定，所以可以取其中一个结果作为参考。</p>
<pre><code><span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 100
unique <span class="keyword">use</span> time 0.002 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.005 <span class="literal">s</span>
---------------------
<span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 1000
unique <span class="keyword">use</span> time 0.049 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.001 <span class="literal">s</span>
---------------------
<span class="keyword">Report</span> <span class="keyword">for</span> <span class="keyword">list</span> size 100000
unique <span class="keyword">use</span> time 30.716 <span class="literal">s</span>
hash <span class="keyword">set</span> <span class="keyword">use</span> time 0.019 <span class="literal">s</span>
</code></pre><ol>
<li>列表容量较少的时候（100左右），groovy的unique方法性能还是有一点点优势的</li>
<li>大容量的列表去重的时候，依旧比使用HashSet的速度慢了很多。所以如果大列表处理的时候，还是得选用HashSet。</li>
</ol>
<h2 id="Groovy_unique方法源码分析">Groovy unique方法源码分析</h2><p>unique方法的源码如下：</p>
<pre><code>public static &lt;T&gt; Collection&lt;T&gt; unique<span class="params">(Collection&lt;T&gt; self, boolean mutate)</span> {
    ArrayList answer = new ArrayList<span class="params">()</span>;
    Iterator i$ = self.iterator<span class="params">()</span>;
    <span class="comment">//双重循环</span>
    while<span class="params">(i$.hasNext<span class="params">()</span>)</span> {
        Object t = i$.next<span class="params">()</span>;
        boolean duplicated = <span class="literal">false</span>;
        Iterator i$<span class="number">1</span> = answer.iterator<span class="params">()</span>;
        <span class="comment">//循环传进来的带重复元素的列表而不是循环已经去重的列表</span>
        while<span class="params">(i$<span class="number">1</span>.hasNext<span class="params">()</span>)</span> {
            Object t2 = i$<span class="number">1</span>.next<span class="params">()</span>;
            <span class="keyword">if</span><span class="params">(coercedEquals<span class="params">(t, t2)</span>)</span> {
                duplicated = <span class="literal">true</span>;
                break;
            }
        }

        <span class="keyword">if</span><span class="params">(!duplicated)</span> {
            answer.add<span class="params">(t)</span>;
        }
    }

    <span class="keyword">if</span><span class="params">(mutate)</span> {
        self.clear<span class="params">()</span>;
        self.addAll<span class="params">(answer)</span>;
    }

    return <span class="params">(Collection)</span><span class="params">(mutate?self:answer)</span>;
}
</code></pre><p>可以发现，非常不幸的两个导致性能底下的代码实现</p>
<ol>
<li>双重循环</li>
<li>在判断重复元素的时候，是去循环原始的List，而不是新构建的容量较小的List，这个也会增加代码执行时间。</li>
</ol>
<h2 id="结论">结论</h2><p>一直以为这种框架性质的代码，一定是千锤百炼，写得优雅又高效的，不过事实就是：代码写得好看，性能并不一定好！<br>Groovy方法虽然便捷，但是使用内置的方法还是得谨慎，毕竟要处理超过100的列表是经常的事。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近发现使用Groovy中的集合去重unique方法似乎会导致运行时间变长。身为一个java程序员一直比较习惯用HashSet去过滤重复的数据，看到groovy中有这么一个去重复的方法，觉得挺方便，所以就很开心的用上了。但是测试以后发现，这个方法性能真的是很差劲的……]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unix系统中的SHELL]]></title>
    <link href="http://luoyuan800.github.io/2016/07/22/unix-shell/"/>
    <id>http://luoyuan800.github.io/2016/07/22/unix-shell/</id>
    <published>2016-07-22T01:44:14.000Z</published>
    <updated>2016-07-26T03:45:12.850Z</updated>
    <content type="html"><![CDATA[<p>关于各个版本shell的介绍<a id="more"></a></p>
<h2 id="首先是各个操作系统上自带的shell的列表">首先是各个操作系统上自带的shell的列表</h2><table>
<thead>
<tr>
<th></th>
<th>SHELL</th>
<th>Solaris</th>
<th>HP-UX</th>
<th>AIX</th>
<th>LINUX</th>
</tr>
</thead>
<tbody>
<tr>
<td>BSH</td>
<td>/usr/bin/sh</td>
<td>-</td>
<td>/usr/bin/bsh</td>
<td>/bin/ash</td>
<td></td>
</tr>
<tr>
<td>CSH</td>
<td>/usr/bin/csh</td>
<td>/usr/bin/csh</td>
<td>/usr/bin/csh</td>
<td>/bin/csh</td>
<td></td>
</tr>
<tr>
<td>TCSH</td>
<td>/usr/bin/tcsh</td>
<td>-</td>
<td>-</td>
<td>/bin/tcsh</td>
<td></td>
</tr>
<tr>
<td>KSH88</td>
<td>/usr/bin/ksh</td>
<td>/usr/bin/ksh</td>
<td>/usr/bin/ksh</td>
<td>-</td>
</tr>
<tr>
<td>KSH93</td>
<td>/usr/dt/bin/dtksh</td>
<td>dtksh</td>
<td>/usr/bin/ksh93</td>
<td>-</td>
</tr>
<tr>
<td>BASH</td>
<td>/usr/bin/bash</td>
<td>-</td>
<td>-</td>
<td>/bin/bash</td>
</tr>
<tr>
<td>PDKSH</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>/bin/ksh</td>
</tr>
<tr>
<td>POSIXSH</td>
<td>/usr/xpg4/bin/sh</td>
<td>/bin/sh</td>
<td>/usr/bin/psh</td>
<td>/bin/sh</td>
</tr>
<tr>
<td>ZSH</td>
<td>/usr/bin/zsh</td>
<td>-</td>
<td>-</td>
<td>/bin/zsh</td>
</tr>
</tbody>
</table>
<p>默认情况下在上表中路径为/bin/sh的shell操作系统命令行默认的shell（可以通过修改配置文件改变）。<br>如果要切换到不同的shell，输入对应的shell即可启动。</p>
<h2 id="不同shell的个人看法">不同shell的个人看法</h2><ul>
<li>ksh适用与script开发，因为比较规范。</li>
<li>bash比较多人用，因为是Linux的默认shell，并且各种操作比较符合正常人使用。</li>
<li>zsh功能比较齐全，可以算是bash的扩展，但是坑人的是它不能使用退格键删除输入</li>
<li>bsh比较反人类操作，不支持方向键和删除键</li>
<li>csh虽然各个平台都有安装，但是不太适用需要编写script的人</li>
</ul>
<h2 id="关于shell的注意事项">关于shell的注意事项</h2><p>不要改变默认root用户登陆的shell，因为不是系统静态绑定的shell是可以被删除的，如果修改成非静态的shell会有root用户无法登陆的风险。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于各个版本shell的介绍]]>
    
    </summary>
    
      <category term="编程-Linux/Unix" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Linux-Unix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ListView]]></title>
    <link href="http://luoyuan800.github.io/2016/01/31/android_ListView/"/>
    <id>http://luoyuan800.github.io/2016/01/31/android_ListView/</id>
    <published>2016-01-31T03:39:21.000Z</published>
    <updated>2016-01-31T03:47:50.111Z</updated>
    <content type="html"><![CDATA[<p>简单记录下ListView的使用方式。<br><a id="more"></a></p>
<h2 id="使用方式">使用方式</h2><p>创建ListView对象之后需要设置一个Adapter才可以显示数据。</p>
<h2 id="Adapter">Adapter</h2><p>ListView的Adapter是要展示的对象集合。一般使用的时候都会自己创建一个自定义的Adapter继承自BaseAdapter，在其中定义显示的内容和方式。</p>
<ol>
<li>getCount() 方法</li>
</ol>
<p>必须实现这个方法返回Adapter中数据的个数，需要这个个数来判断ListView是否需要显示滚动条。</p>
<ol>
<li>getItem(int position) 方法</li>
</ol>
<p>必须实现这个方法返回某个位置显示的对象</p>
<ol>
<li>getItemId(int position) 方法</li>
</ol>
<p>返回某个指定位置上显示的对象的唯一标示</p>
<ol>
<li>getView(final int position, View convertView, ViewGroup parent) 方法<br>返回用来显示单个数据的view。在这个方法中创建View对象并且设置显示的数据样式。参数里面 传进来的convertView是当前（position）说使用的View，这个是给View重用提供方便的。如果当前位置已经显示过了，那么这个View不为空，可以更新这个view的显示数据；如果当前位置是第一次显示，这个参数为空，需要在方法中手动创建。</li>
</ol>
<h2 id="ViewHolder">ViewHolder</h2><p>在网上找到的很多示例都会在Adapter中使用ViewHolder对象。<br>这个并不是android提供的一种机制，而是开发者约定俗成的重用View的一种方式。ListView可以实现View重用（拉动滚动条的时候，直接更新当前已经显示的view），使用一个额外的类ViewHolder来存储额外的数据，可以在update view显示新的数据的时候更加方便。</p>
<h2 id="一个简单的示例">一个简单的示例</h2><pre><code><span class="comment">/**
 * Copyright 2015 gluo.
 * ALL RIGHTS RESERVED.
 * Created by gluo on 11/2/2015.
 */</span>
ListView view = <span class="keyword">new</span> ListView(context);
view.setAdapter(<span class="keyword">new</span> BaseAdapter {

    <span class="function"><span class="keyword">public</span> <span class="title">PetAdapter</span><span class="params">(ArrayList&lt;String&gt;data)</span> </span>{
        adapterData = data;
    }

    <span class="keyword">private</span> List&lt;String&gt; adapterData;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> adapterData != <span class="keyword">null</span> ? adapterData.size() : 0;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function">String <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{
        <span class="keyword">if</span> (position &gt;= getCount()) position = <span class="number">0</span>;
        <span class="function"><span class="keyword">return</span> adapterData.<span class="title">get</span><span class="params">(position)</span></span>;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{
        <span class="keyword">return</span> position;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>{
        PetViewHolder holder;
        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) {
            holder = <span class="keyword">new</span> PetViewHolder();
            convertView = holder.view;
            convertView.setTag(holder);
        } <span class="keyword">else</span> {
            holder = (PetViewHolder) convertView.getTag();
        }
        String pet = getItem(position);
        holder.updatePet(pet);
        <span class="keyword">return</span> convertView;
    }

    <span class="class"><span class="keyword">class</span> <span class="title">PetViewHolder</span> </span>{
        <span class="keyword">private</span> TextView view = <span class="keyword">new</span> TextView(context);
        <span class="keyword">private</span> String pet;

        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">updatePet</span><span class="params">(<span class="keyword">final</span> String pet)</span> </span>{
            <span class="keyword">this</span>.pet = pet;
            view.setText(pet);           
        }
    }
}
</code></pre><h2 id="局限">局限</h2><p>ListView只能上下滚动，并且一行只会显示一条数据。如果需要一行显示多个数据的话需要在自定义View上下文章。但是要是实现自动换行是很复杂的。</p>
<h2 id="扩展">扩展</h2><p>有时候一次性加载太多数据到一个ListView中是很耗内存的。所以上拉加载更多就应运而生。Android原生不支持上拉加载更多。需要自己实现：</p>
<ol>
<li>一开始只加载有限的条数数据</li>
<li>判断上拉的时候是否到达底部</li>
<li>ListView中添加自定义的footView显示是否可以加载更多，或者一个按钮可以点击加载更多。</li>
<li><p>一个简单的例子</p>
<pre><code>package cn.gavin.utils.ui;

<span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.util.AttributeSet;
<span class="keyword">import</span> android.view.LayoutInflater;
<span class="keyword">import</span> android.view.View;
<span class="keyword">import</span> android.view.View.OnClickListener;
<span class="keyword">import</span> android.view.ViewGroup;
<span class="keyword">import</span> android.widget.AbsListView;
<span class="keyword">import</span> android.widget.AbsListView.OnScrollListener;
<span class="keyword">import</span> android.widget.ListView;
<span class="keyword">import</span> android.widget.TextView;

<span class="keyword">import</span> cn.gavin.R;

public <span class="class"><span class="keyword">class</span> <span class="title">LoadMoreListView</span> <span class="keyword">extends</span> <span class="title">ListView</span> <span class="title">implements</span> <span class="title">OnScrollListener</span>,
        <span class="title">OnClickListener</span> </span>{
    <span class="comment">// 点击加载更多枚举所有状态</span>
    private enum DListViewLoadingMore {
        LV_LOADING, <span class="comment">// 普通状态</span>
        LV_NORMAL, <span class="comment">// 加载状态</span>
        LV_OVER <span class="comment">// 结束状态</span>
    }

    <span class="comment">/**
     * 自定义接口
     */</span>
    public interface OnRefreshLoadingMoreListener {
        <span class="comment">/**
         * 点击加载更多
         */</span>
        <span class="keyword">void</span> onLoadMore();

    }
</code></pre></li>
</ol>
<pre><code>    <span class="keyword">private</span> DListViewLoadingMore loadingMoreState = DListViewLoadingMore.LV_NORMAL;<span class="comment">// 加载更多默认状态.</span>

    <span class="keyword">private</span> View mLoadingView;<span class="comment">// 加载中...View(mFootView)</span>

    <span class="keyword">private</span> TextView mLoadMoreTextView;<span class="comment">// 加载更多.(mFootView)</span>

    <span class="keyword">private</span> OnRefreshLoadingMoreListener onRefreshLoadingMoreListener;<span class="comment">// 下拉刷新接口（自定义）</span>

    <span class="function"><span class="keyword">public</span> <span class="title">LoadMoreListView</span><span class="params">(Context context)</span> </span>{
        <span class="keyword">super</span>(context, <span class="keyword">null</span>);
        initDragListView(context);
    }

    <span class="function"><span class="keyword">public</span> <span class="title">LoadMoreListView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{
        <span class="keyword">super</span>(context, attrs);
        initDragListView(context);
    }

    <span class="comment">/**
     * 初始化ListView
     */</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">initDragListView</span><span class="params">(Context context)</span> </span>{
        initLoadMoreView(context);<span class="comment">// 初始化footer</span>

        setOnScrollListener(<span class="keyword">this</span>);<span class="comment">// ListView滚动监听</span>
    }


    <span class="comment">/**
     * 初始化底部加载更多控件
     */</span>
    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initLoadMoreView</span><span class="params">(Context context)</span> </span>{
        View mFootView = LayoutInflater.from(context).inflate(R.layout.footer, (ViewGroup) <span class="keyword">this</span>.findViewById(R.id.load_more_view));

        View mLoadMoreView = mFootView.findViewById(R.id.load_more_view);

        mLoadMoreTextView = (TextView) mFootView
                .findViewById(R.id.load_more_tv);

        mLoadingView = mFootView
                .findViewById(R.id.loading_layout);

        mLoadMoreView.setOnClickListener(<span class="keyword">this</span>);

        addFooterView(mFootView);
    }


    <span class="comment">/**
     * 底部点击事件
     */</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
        <span class="comment">// 防止重复点击</span>
        <span class="keyword">if</span> (onRefreshLoadingMoreListener != <span class="keyword">null</span>
                &amp;&amp; loadingMoreState == DListViewLoadingMore.LV_NORMAL) {
            switchFooterViewState(DListViewLoadingMore.LV_LOADING);
            onRefreshLoadingMoreListener.onLoadMore();<span class="comment">// 对外提供方法加载更多.</span>
        }

    }

    <span class="comment">/**
     * 点击加载更多
     *
     * <span class="doctag">@param</span> flag 数据是否已全部加载完毕
     */</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onLoadMoreComplete</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>{
        <span class="keyword">if</span> (flag) {
            switchFooterViewState(DListViewLoadingMore.LV_OVER);
        } <span class="keyword">else</span> {
            switchFooterViewState(DListViewLoadingMore.LV_NORMAL);
        }

    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem,
                         <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>{
    }

    <span class="comment">/**
     * ListView 滑动监听
     */</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>{

    }

    <span class="comment">// 更新Footview视图</span>
    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">switchFooterViewState</span><span class="params">(DListViewLoadingMore state)</span> </span>{
        <span class="keyword">switch</span> (state) {
            <span class="comment">// 普通状态</span>
            <span class="keyword">case</span> LV_NORMAL:
                mLoadingView.setVisibility(View.GONE);
                mLoadMoreTextView.setVisibility(View.VISIBLE);
                mLoadMoreTextView.setText(<span class="string">"查看更多"</span>);
                <span class="keyword">break</span>;
            <span class="comment">// 加载中状态</span>
            <span class="keyword">case</span> LV_LOADING:
                mLoadingView.setVisibility(View.VISIBLE);
                mLoadMoreTextView.setVisibility(View.GONE);
                <span class="keyword">break</span>;
            <span class="comment">// 加载完毕状态</span>
            <span class="keyword">case</span> LV_OVER:
                mLoadingView.setVisibility(View.GONE);
                mLoadMoreTextView.setVisibility(View.VISIBLE);
                mLoadMoreTextView.setText(<span class="string">"加载完毕"</span>);
                <span class="keyword">break</span>;
            <span class="keyword">default</span>:
                <span class="keyword">break</span>;
        }
        loadingMoreState = state;
    }


    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnLoadListener</span><span class="params">(OnRefreshLoadingMoreListener loadListener)</span></span>{
        <span class="keyword">this</span>.onRefreshLoadingMoreListener = loadListener;
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>简单记录下ListView的使用方式。<br>]]>
    
    </summary>
    
      <category term="编程-Android" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux学习积累]]></title>
    <link href="http://luoyuan800.github.io/2015/11/25/ubuntu/"/>
    <id>http://luoyuan800.github.io/2015/11/25/ubuntu/</id>
    <published>2015-11-25T01:44:14.000Z</published>
    <updated>2016-10-28T02:28:14.872Z</updated>
    <content type="html"><![CDATA[<p>自己用到过和遇见过得命令和异常陈列，基本是Ubuntu之类的界面和操作系统。<a id="more"></a></p>
<h2 id="Permission_denied">Permission denied</h2><p><code>sudo chmod -R 777 dell</code></p>
<p>此命令设置所有用户都有权限访问这个文件夹，其中<code>777=111111111</code>。</p>
<h2 id="如何安装bin文件">如何安装bin文件</h2><p><code>sudo chmod u+x name.bin</code></p>
<p>这个命令给予这个bin文件读写的权限</p>
<p><code>sudo name.bin</code></p>
<p>这个命令执行安装</p>
<h2 id="创建新用户">创建新用户</h2><p><code>sudo adduser &lt;username&gt;</code></p>
<h2 id="修改用户密码">修改用户密码</h2><p><code>sudo password &lt;username&gt;</code></p>
<h2 id="切换用户">切换用户</h2><p><code>su &lt;username&gt;</code></p>
<p>输入密码后就切换到对应的user了</p>
<p><code>su - &lt;username&gt;</code></p>
<p>这个命令会把当前设置的环境变量也带过去</p>
<h2 id="修改默认root用户的密码">修改默认root用户的密码</h2><p>如果安装时候直接设置了自己的用户名，那么root用户的密码就会是随机的（Ubuntu默认不开放root用户)。</p>
<p><code>sudo passwd</code></p>
<p>之后按照提示输入密码就可以修改root用户的密码了</p>
<h2 id="为特定用户添加sudo命令权限">为特定用户添加sudo命令权限</h2><p>有些用户没有运行sudo的权限，执行sudo的话会提示<code>username is not in the sudoers file</code><br>修改sudoers文件可以解决这个问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ su -root <span class="comment">## 切换root用户`</span></span><br><span class="line">$ chmod u+w /etc/sudoers <span class="comment"># 添加写权限</span></span><br><span class="line">$  /etc/sudoers </span><br><span class="line">$ <span class="comment"># 在打开的文本编辑器中，找到r**oot ALL=(ALL) ALL在下面添加一行 username ALL=(ALL) ALL</span></span><br><span class="line">$ <span class="comment"># 保存后记得关闭sudoers的写权限</span></span><br><span class="line">$ chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure></p>
<h2 id="挂载远程文件系统(mount_remote_filesystem_NFS)">挂载远程文件系统(mount remote filesystem NFS)</h2><ol>
<li>实现本机的文件系统可以被别的机器挂载</li>
</ol>
<p>1.1. 安装nfs服务器</p>
<p><code>sudo apt-get install nfs-kernel-server</code></p>
<p>1.2. 修改权限配置文件</p>
<p><code>vi /etc/exports</code></p>
<p>根据其中的范例添加你想要共享出去的文件目录（mount point）</p>
<p>1.3. 重启服务使得配置生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> /etc/init.d/portmap restart</span><br><span class="line"><span class="variable">$sudo</span> /etc/init.d/nfs-kernel-server restart</span><br></pre></td></tr></table></figure></p>
<p>1.4. 你可以使用 <code>showmount -e</code> 命令查看共享成功的文件系统</p>
<ol>
<li>挂载命令</li>
</ol>
<p><code>sudo mount -t nfs localhost:/home /mnt</code></p>
<p>其中-t nfs 可以省略，会使用默认支持的nfs文件类型挂载。</p>
<h2 id="一些基本的命令提示‘command_not_found’">一些基本的命令提示‘command not found’</h2><p>（这个问题一般会出现在redhat 红帽系统中）<br>例如输入命令：<code>ifconfig</code><br>显示<code>bash: ifconfig: command not found</code><br>可能是路径问题，如果然后输入<br><code>/sbin/ifconfig</code>  就会显示IP地址等信息。<br>那么解决办法是<br>执行<code>cat ~/.bash_profile</code> 看自己的PATH，然后再执行：<br><code>gedit /etc/profile</code> 在最后一行后面添加：<br>PATH=$PATH:sbin<br>export PATH=$PATH:/sbin<br>保存退出。<br>然后在初始化一下：<code>source /etc/profile</code> 你再直接输入：<code>ifconfig</code> 就会直接显示IP等信息了</p>
<h2 id="error_while_loading_shared_libraries">error while loading shared libraries</h2><p>error while loading shared libraries：<strong>**</strong> ：cannot restore segment prot after reloc: Permission denied。<br>网上查了一下，原因是selinux的问题，selinux的设置太过严格导致的。解决的办法是在root用户下，修改/etc/selinux/config 文件<br>把SELINUX=enforcing 改成 SELINUX=disabled。<br>然后，保存关闭，重启机器就可以了。</p>
<h2 id="Linux开启ssh服务">Linux开启ssh服务</h2><ul>
<li>开启服务执行 /etc/init.d/sshd start</li>
<li>如果还是不能连接，尝试关闭防火墙<ul>
<li>输入 setup</li>
<li>在弹出界面选择firewall</li>
<li>选择 no firewall。</li>
</ul>
</li>
</ul>
<h2 id="修改ssh的最大连接并发数">修改ssh的最大连接并发数</h2><ul>
<li>打开文件进行编辑 ： vi /etc.ssh/sshd_config</li>
<li>找到 MazStartups 去掉注释，并且修改大最小和最大的数值。</li>
<li>重启ssh服务，可以尝试以下命令（不同内核）<ul>
<li>sudo systemctl restart sshd </li>
<li>/etc/rc.d/init.d/sshd restart </li>
<li>service sshd restart</li>
</ul>
</li>
</ul>
<h2 id="Linux_解压">Linux 解压</h2><ul>
<li>tar<ul>
<li>解压： tar xvf fileName.tar</li>
<li>打包： tar cvf vffileNametar dirName</li>
</ul>
</li>
<li>.gz<ul>
<li>解压： gunzip FileName.gz</li>
<li>解压： gzip -d FileName.gz</li>
<li>打包： gzip FileName dirName</li>
</ul>
</li>
<li>.tar.gz 和 .tgz<ul>
<li>解压： tar zxvf FileName.tar.gz</li>
<li>打包： tar zcvf FileName.tar.gz DirName</li>
</ul>
</li>
</ul>
<h2 id="Linux中的复制命令">Linux中的复制命令</h2><p>cp -rf source_dir target_dir</p>
<h2 id="查看Linux内核版本的命令">查看Linux内核版本的命令</h2><ul>
<li>命令： uname -a, 查看系统内核版本号及系统名称</li>
<li>命令： cat /proc/version, 查看目录”/proc”下version的信息，也可以得到当前系统的内核版本号及系统名称 </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己用到过和遇见过得命令和异常陈列，基本是Ubuntu之类的界面和操作系统。]]>
    
    </summary>
    
      <category term="编程-Linux/Unix" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Linux-Unix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自动更新推送的实现]]></title>
    <link href="http://luoyuan800.github.io/2015/10/28/android_auto_update/"/>
    <id>http://luoyuan800.github.io/2015/10/28/android_auto_update/</id>
    <published>2015-10-28T03:39:21.000Z</published>
    <updated>2015-10-28T07:06:02.415Z</updated>
    <content type="html"><![CDATA[<p>当发布了一个Android app之后，我们最需要使用的功能就是如何实现当有更新的是推送给用户。<br><a id="more"></a></p>
<h2 id="实现思路">实现思路</h2><ol>
<li>首先是要申请一个可以直接访问的网盘放置你的更新文件</li>
<li>放置一个文件，里面注明更新后的版本号</li>
<li>在app的代码中每次启动的时候去下载那个标识有版本号的文件，然后匹配当前app的版本和，如果不一致，提示用户更新。</li>
</ol>
<h2 id="代码相关">代码相关</h2><h3 id="读取网络文件">读取网络文件</h3><p>首先是如何下载网络上文件。 Android不允许在UI主线程进行网络访问的操作，所以我们需要构建一个线程，无论是用<code>new Thread</code>还是用<code>handler.put(Runnable)</code> 都是可以的，在线程的run方法中进行网络访问或者下载：</p>
<pre><code><span class="keyword">private</span> <span class="keyword">void</span> checkUpdate() {
    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {
        <span class="keyword">public</span> <span class="keyword">void</span> run() {
            <span class="keyword">try</span> {
                PackageInfo pInfo = getPackageManager().getPackageInfo(
                        getPackageName(), <span class="number">0</span>);<span class="comment">//获取当前的版本信息</span>
                currentVersion = pInfo.versionName.<span class="built_in">trim</span>();
                <span class="comment">// 构造URL</span>
                URL url = <span class="keyword">new</span> URL(VERSION_CHECK_URL);
                <span class="comment">// 打开连接</span>
                URLConnection con = url.openConnection();
                <span class="comment">//获得文件的长度</span>
                <span class="built_in">int</span> contentLength = con.getContentLength();
                <span class="comment">// 输入流</span>
                InputStream is = con.getInputStream();
                <span class="keyword">BufferedReader</span> br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(is));

                <span class="built_in">int</span> curVersionCode = pInfo.versionCode;
                updateVersion = br.readLine().replace((<span class="built_in">char</span>) <span class="number">65279</span>, <span class="string">' '</span>).<span class="built_in">trim</span>();
                <span class="comment">//请注意这一行，只是为了防止网络上的文件使用了win的带BOM的编码文本，BOM文本第一行开头会有一个特殊的字符。</span>

                <span class="keyword">if</span> (updateVersion.equalsIgnoreCase(currentVersion)) {
                    <span class="comment">//不需要升级通知</span>
                } <span class="keyword">else</span> {
                    <span class="keyword">String</span> info = br.readLine();
                    versionUpdateInfo = <span class="keyword">new</span> StringBuilder(<span class="string">"新版本:"</span> + updateVersion);
                    <span class="keyword">while</span> (info != <span class="keyword">null</span> &amp;&amp; !info.isEmpty()) {
                    <span class="comment">//获取升级信息，你可以在升级的文本里面第一行写上版本号，第二行开始写上升级的详细信息。</span>
                        versionUpdateInfo.<span class="built_in">append</span>(<span class="string">"\n"</span>).<span class="built_in">append</span>(info);
                        info = br.readLine();
                    }
                   <span class="comment">//弹出一个窗口，提示用户可以进行升级</span>
                }
                br.close();
            } <span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
    }).start();
}
</code></pre><h3 id="下载更新包">下载更新包</h3><p> 下载升级包并且保存到本地SD卡，首先必须要设置SD卡的权限，这里不在赘述。以下代码是下载安装包并且保存到本地SD卡：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">boolean</span> downloadPAK(Handler handler) {
    <span class="keyword">try</span> {
        <span class="comment">// 构造URL</span>
        URL url = <span class="keyword">new</span> URL(PACKAGE_DOWNLOAD_URL);
        <span class="comment">// 打开连接</span>
        URLConnection con = url.openConnection();
        <span class="comment">//获得文件的长度</span>
        <span class="keyword">int</span> contentLength = con.getContentLength();

        <span class="comment">// 输入流</span>
        InputStream is = con.getInputStream();
        BufferedInputStream br = <span class="keyword">new</span> BufferedInputStream(is);
        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];
        <span class="keyword">int</span> len;
        <span class="comment">// 输出的文件流</span>
        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(APK_PATH + <span class="string">"/appName.apk"</span>);
        <span class="keyword">if</span> (<span class="keyword">file</span>.exists()) {
            <span class="keyword">file</span>.<span class="keyword">delete</span>();
        }
        <span class="keyword">File</span> path = <span class="keyword">new</span> <span class="keyword">File</span>(APK_PATH);
        <span class="keyword">if</span> (!path.exists()) {
            path.mkdirs();
        }
        <span class="keyword">file</span>.createNewFile();
        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);
        <span class="comment">// 开始读取</span>
        <span class="keyword">int</span> alreadySize = <span class="number">0</span>;
        <span class="keyword">while</span> ((len = is.<span class="keyword">read</span>(data)) != -<span class="number">1</span>) {
            os.<span class="keyword">write</span>(data, <span class="number">0</span>, len);
        }
        os.flush();
        os.close();
        br.close();
        <span class="comment">//通知用户下载成功</span>
        <span class="keyword">return</span> <span class="keyword">true</span>;
    } <span class="keyword">catch</span> (Exception e) {
        e.printStackTrace();
        Log.e(TAG, <span class="string">"DownloadUpdate"</span>, e);
    }
       <span class="comment">//通知用户下载失败</span>
    <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><h3 id="自动安装APK">自动安装APK</h3><p>下载完成后我们要弹出安装提示给用户，并且保证安装能够完成：</p>
<pre><code><span class="keyword">private</span> void installAPK() {
    <span class="type">Intent</span> <span class="type">intent</span> = new <span class="type">Intent</span>(<span class="type">Intent</span>.ACTION_VIEW);
    <span class="type">intent</span>.setDataAndType(Uri.fromFile(new <span class="keyword">File</span>(APK_PATH + <span class="string">"/appName.apk"</span>)),
            <span class="string">"application/vnd.android.package-archive"</span>);
    <span class="type">intent</span>.addFlags(<span class="type">Intent</span>.FLAG_ACTIVITY_NEW_TASK);//必须要加上这一句话才能保证安装完成后不会跳出到主界面
    context.startActivity(<span class="type">intent</span>);
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>当发布了一个Android app之后，我们最需要使用的功能就是如何实现当有更新的是推送给用户。<br>]]>
    
    </summary>
    
      <category term="编程-Android" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识Android]]></title>
    <link href="http://luoyuan800.github.io/2015/10/28/start_android/"/>
    <id>http://luoyuan800.github.io/2015/10/28/start_android/</id>
    <published>2015-10-28T00:39:21.000Z</published>
    <updated>2015-10-28T07:52:48.850Z</updated>
    <content type="html"><![CDATA[<p>以下是一些零散初级的Android相关知识。<br><a id="more"></a></p>
<h2 id="界面类">界面类</h2><p>展示在屏幕上的东西。在安卓中的基类为Activity。所有界面都是需要实现这个接口，并且实现相应的onCreate方法。</p>
<h2 id="布局">布局</h2><p>android中界面类是布局是分来来设定的，布局可以在一个放到res/layout文件夹中的xml文件来描述。布局文件的标识是一个整型的id：R.layout.id。需要在一个Activity的onCreate方法中使用setContentView方法将对应的布局文件绑定到这个Activity中。</p>
<h2 id="Local_String">Local String</h2><p>在界面中暂时的静态文字（不会动态改变的文字）是可以抽取到一个放置在res/value文件夹中的strings.xml中定义，可以在布局描述文件中使用id号来引用这个文字。</p>
<h2 id="主文件">主文件</h2><p>Android中的主文件，也就是Android程序的入口文件不是java类，而是AndroidManifest.xml文件，该文件中会描述到这个Android程序支持的版本，程序具有的手机操作权限。同时，如果我们定义了一个Activity类，那么需要将这个类名在Androidmanifest.xml中用<activity>标签声明一次，在程序运行的过程中才可以使用到这个界面。在文件中的<uses-sdk android:minsdkversion="11">标签限制了当前android项目开发中能够使用的功能的最低版本，而且也限制了生成的程序能够安装的最低版本。</uses-sdk></activity></p>
<h2 id="控件">控件</h2><p>Android中能显示给用户看的界面上基本元素就是控件，能够使用的控件对象在android.widget包内。可以在布局文件中通过和控件同名的标签来引用控件与定义控件属性。</p>
<h2 id="Activity切换">Activity切换</h2><p>从一个Activity切换到另外一个activity有两种场景：<br>需要使用到Intent主动设置切换的目的界面，然后调用startActivity（Intent）生成目的界面的实例。<br>当前界面被结束的时候，比如按下了手机的后退键，会被动的切换到上一个界面，如果没有上级界面就会退出程序。因为Intent是构建是需要制定源界面实例和目的界面类，所以可以实现后退的功能。<br>Activity的界面切换效果展示，默认的界面切换是直接展示下一个界面，我们可以设定界面切换动画，从而使得切换过程更加频繁。动画效果是用一个xml文件来描述，并且必须被放置在res/anim文件夹内。可以在发生界面切换的地方调用overridePendingTransition(进入的动画id, 退出的动画id)来设置切换动画。会发生界面切换地方包括：</p>
<p>1.调用了startActivity方法之后;</p>
<ol>
<li>在Activity的finished方法中调用了super.finished()之后。</li>
</ol>
<h2 id="ListView">ListView</h2><p>在Android中如果你需要展示一个列表，并且希望可以产生列表项的点击动作，那么可以选择一个ListView。可以在一个layout的xml文件中定义ListView。同时定义list_item的xml文件。最简便的而且推荐的方法是，是实现一个继承自ListActivity的类，那么这个Activity就实现了ListView的功能了，我们只需要定义一个List Item的layout文件就可以展示列表数据了。<br>ListView中要展示的数据是通过Adapter类来传入的，要展示到ListView中的数据组需要先放置到Adapter中，然后将Adapter设置给ListView实例。<br>ListView并不是直接使用Adapter的数据去构建直接的Item来展示数据，而是在Adapter中有getView的方法，这个方法会返回某个Item的展示View实例。一般情况下我们需要自己构建一个Adapter类的子类复写getView方法来设定用什么样的格式展示数据。<br>网络上说的很多的View缓存技术，就是对应大量List数据的展示并不是每一个Item都创建一个ItemView，而是将一个屏幕显示数量的View缓存起来，每次滚动ListView的时候，都是更新View，而不是重新创建，这样可以节省系统资源。这个功能就是通过Adapter的getView方法来实现的。</p>
<h2 id="R">R</h2><p>在Android的项目代码编写中，R这个静态常量是可以引用到我们定义在layout、value、anim…等文件夹中的XML资源的。<br>注意的是android.R引用到的是Android本身内置的资源。</p>
<h2 id="res文件夹">res文件夹</h2><p>res文件夹内的文件不能用数字命名</p>
<h3 id="anim">anim</h3><p>这个文件夹下放置动画效果的文件，如果你的项目中没有这个文件夹，可以手动创建。</p>
<h3 id="drawable">drawable</h3><p>这个文件夹内放置图片文件</p>
<h2 id="安装Android开发IDE_Android_Studio">安装Android开发IDE Android Studio</h2><ol>
<li><p>因为google被墙，所以我们需要在host文件中增加（HOSTS文件位置：C:\Windows\system32\drivers\etc\hosts）：</p>
<p> 74.125.237.1 dl-ssl.google.com</p>
</li>
<li><p>在Android Studio的安装文件BIN文件夹里打找到“idea.properties”，最后一行添加：<code>disable.android.first.run=true</code></p>
</li>
</ol>
<h2 id="启动Android虚拟机失败">启动Android虚拟机失败</h2><p>如果提示 Failed to obtain GLES 1.x extensions string!<br>有可能是因为远程操作电脑导致的这个问题,解决办法是打开虚拟机的配置，去掉Use Host GPU前面的√</p>
<h2 id="Android_开发过程中遇到的异常信息">Android 开发过程中遇到的异常信息</h2><h3 id="android-os-NetworkOnMainThreadException">android.os.NetworkOnMainThreadException</h3><p>Android4.0之后开始不允许在主线程内访问网络，所以只需要使用一个子线程去访问网络，并且使用消息机制返回网络访问的结果就可以避开这个异常了。</p>
<h3 id="ndroid-view-WindowLeaked">ndroid.view.WindowLeaked</h3><p>按字面了解，Window Leaked大概就是说一个窗体泄漏了，也就是我们常说的内存泄漏，为什么窗体会泄漏呢？产生原因：<br>我们知道Android的每一个Activity都有个WindowManager窗体管理器，同样，构建在某个Activity之上的对话框、PopupWindow也有相应的WindowManager窗体管理器。因为对话框、PopupWindown不能脱离Activity而单独存在着，所以当某个Dialog或者某个PopupWindow正在显示的时候我们去finish()了承载该Dialog(或PopupWindow)的Activity时，就会抛Window Leaked异常了，因为这个Dialog(或PopupWindow)的WindowManager已经没有谁可以附属了，所以它的窗体管理器已经泄漏了。<br>解决方法是关闭(finish)某个Activity前，要确保附属在上面的Dialog或PopupWindow已经关闭(dismiss)了。</p>
<h3 id="Android_showDialog时报错">Android showDialog时报错</h3><p>错误信息是<code>requestFeature() must be called before adding content</code></p>
<p>出现此问题是由于dialog.show()之前调用了dialog.setContentView()或者dialog.getwindow()等，正确的应该是dialog.show()之后调用dialog.setContentView()</p>
<h3 id="Service_Intent_must_be_explicit">Service Intent must be explicit</h3><p>android5.0 api=21以上要求启动service要设置packagename。</p>
<h3 id="Gradle_DSL_method_not_found:_‘android()’">Gradle DSL method not found: ‘android()’</h3><p>这个错误一般是在创建一个新的Android项目的时候报错，解决办法是删掉build.gradle中的<code>android{}</code>定义</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下是一些零散初级的Android相关知识。<br>]]>
    
    </summary>
    
      <category term="编程-Android" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于snmp4j发送 V3 trap]]></title>
    <link href="http://luoyuan800.github.io/2015/10/09/snmp4j-trap-v3/"/>
    <id>http://luoyuan800.github.io/2015/10/09/snmp4j-trap-v3/</id>
    <published>2015-10-09T08:10:14.000Z</published>
    <updated>2015-10-09T08:49:22.095Z</updated>
    <content type="html"><![CDATA[<p>基于snmp4j收集数据或者发送v1版本的trap比较简单，可以自己动手网上搜索，这里展示下如何发送v3的trap（因为网络上搜索不到）<br><a id="more"></a></p>
<h2 id="SNMP4J版本要求">SNMP4J版本要求</h2><p>snmp4j 2.2.2及以上的版本都会支持使用snmp v3</p>
<h2 id="发送SNMP_v3_Trap的代码">发送SNMP v3 Trap的代码</h2><pre><code><span class="preprocessor"><span class="keyword">import</span> org.snmp4j.PDU;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.ScopedPDU;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.Snmp;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.TransportMapping;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.UserTarget;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.mp.MPv3;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.mp.SnmpConstants;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.SecurityLevel;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.SecurityModels;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.SecurityProtocols;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.USM;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.UsmUser;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.UsmUserEntry;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.Address;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.GenericAddress;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.OID;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.OctetString;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.VariableBinding;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.transport.DefaultUdpTransportMapping;</span>

<span class="preprocessor"><span class="keyword">import</span> java.io.IOException;</span>

<span class="comment">/**
* 本类用于发送v3 Trap信息
*
* @author luoyuan
*/</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnmpSendV3Trap</span> </span>{

<span class="keyword">private</span> Snmp snmp = <span class="literal">null</span>;

<span class="keyword">private</span> Address targetAddress = <span class="literal">null</span>;

<span class="keyword">public</span> SnmpSendV3Trap(String target, int port) throws IOException {
    <span class="comment">//配置EngineID</span>
    OctetString localEngineID = <span class="keyword">new</span> OctetString(MPv3.createLocalEngineID());
    <span class="comment">// 设置目的地的IP和端口</span>
    targetAddress = GenericAddress.parse(String.format(<span class="string">"udp:%s/%s"</span>, target, port));
    TransportMapping transport = <span class="keyword">new</span> DefaultUdpTransportMapping();
    <span class="comment">//配置USM，传入 engine id</span>
    USM usm = <span class="keyword">new</span> USM(SecurityProtocols.getInstance(), localEngineID, <span class="number">0</span>);
    <span class="comment">//添加Usm user， 这里的配置的user， 目标接收端也正确认证才可以接受到这个trap</span>
    <span class="comment">//这里创建User的是全部使用null是表示使用NOAUTH_NOPRIV的模式发送trap</span>
    <span class="comment">//具体的Auth模式可以参考收集snmp数据，是一样配置的。</span>
    usm.updateUser(<span class="keyword">new</span> UsmUserEntry(<span class="keyword">new</span> OctetString(<span class="string">"luo"</span>), <span class="keyword">new</span> UsmUser(<span class="keyword">new</span> OctetString(<span class="string">"luo"</span>),
            <span class="literal">null</span>,
            <span class="literal">null</span>,
            <span class="literal">null</span>,
            <span class="literal">null</span>)));
    <span class="comment">//添加USM到Security Models中</span>
    SecurityModels.getInstance().addSecurityModel(usm);
    <span class="comment">//构建SNMP对象， 并且添加v3模式到其中</span>
    snmp = <span class="keyword">new</span> Snmp(transport);
    snmp.getMessageDispatcher().addMessageProcessingModel(<span class="keyword">new</span> MPv3(usm));
    transport.listen();

}

<span class="comment">/**
 * 向管理进程发送Trap报文
 *
 * @throws IOException
 */</span>
<span class="keyword">public</span> <span class="keyword">void</span> sendPDU() throws IOException {

    <span class="comment">// 设置 target, v3trap 一定要使用UserTarget</span>
    UserTarget target = <span class="keyword">new</span> UserTarget();
    target.setAddress(targetAddress);
    target.setVersion(SnmpConstants.version3);
    <span class="comment">//设置用户认证信息</span>
    target.setSecurityLevel(SecurityLevel.NOAUTH_NOPRIV);
    target.setSecurityName(<span class="keyword">new</span> OctetString(<span class="string">"luo"</span>));

    <span class="comment">// 创建 PDU, 注意这里要使用ScopedPDU</span>
    ScopedPDU pdu = <span class="keyword">new</span> ScopedPDU();
    pdu.add(<span class="keyword">new</span> VariableBinding(<span class="keyword">new</span> OID(<span class="string">".1.3.6.1.2.4407.11.1.1.1.1"</span>),
            <span class="keyword">new</span> OctetString(<span class="string">"SnmpTrap"</span>)));
    pdu.add(<span class="keyword">new</span> VariableBinding(<span class="keyword">new</span> OID(<span class="string">".1.3.6.1.2.4407.11.1.1.1.2"</span>),
            <span class="keyword">new</span> OctetString(<span class="string">"v3"</span>)));
    pdu.setType(PDU.TRAP);

    <span class="comment">// 发送trap</span>
    snmp.send(pdu, target);
}

<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
    <span class="keyword">try</span> {
        SnmpSendV3Trap trapSender = <span class="keyword">new</span> SnmpSendV3Trap(<span class="string">"10.154.10.11"</span>, <span class="number">162</span>);
        trapSender.sendPDU();
    } <span class="keyword">catch</span> (IOException e) {
        e.printStackTrace();
    }
}
}
</code></pre><h2 id="接收_v3_trap_的代码">接收 v3 trap 的代码</h2><pre><code><span class="preprocessor"><span class="keyword">import</span> org.snmp4j.CommandResponder;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.CommandResponderEvent;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.MessageDispatcherImpl;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.Snmp;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.TransportMapping;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.mp.MPv3;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.SecurityModels;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.SecurityProtocols;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.USM;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.UsmUser;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.security.UsmUserEntry;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.Address;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.GenericAddress;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.OctetString;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.TcpAddress;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.UdpAddress;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.smi.VariableBinding;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.transport.DefaultTcpTransportMapping;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.transport.DefaultUdpTransportMapping;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.util.MultiThreadedMessageDispatcher;</span>
<span class="preprocessor"><span class="keyword">import</span> org.snmp4j.util.ThreadPool;</span>
<span class="preprocessor"><span class="keyword">import</span> java.io.IOException;</span>
<span class="preprocessor"><span class="keyword">import</span> java.util.Vector;</span>

<span class="comment">/**
 * 本类用于监听发送到本机的Trap信息
 *
 * @author luoyuan
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalTrapReceiver</span> <span class="keyword">implements</span> <span class="title">CommandResponder</span> </span>{

    <span class="keyword">private</span> MultiThreadedMessageDispatcher dispatcher;
    <span class="keyword">private</span> Snmp snmp = <span class="literal">null</span>;

    <span class="keyword">private</span> LocalTrapReceiver() throws IOException {
        dispatcher = <span class="keyword">new</span> MultiThreadedMessageDispatcher(ThreadPool.create(<span class="string">"snmp trap"</span>, <span class="number">2</span>),
                <span class="keyword">new</span> MessageDispatcherImpl());
        Address listenUdpAddress = GenericAddress.parse(<span class="string">"udp:0.0.0.0/162"</span>); <span class="comment">// udp监听端口</span>
        Address listenTCPAddress = GenericAddress.parse(<span class="string">"tcp:0.0.0.0/162"</span>); <span class="comment">// tcp监听端口</span>
        TransportMapping transport;
        <span class="comment">// 对TCP与UDP协议进行处理</span>
        DefaultUdpTransportMapping udpTransport = <span class="keyword">new</span> DefaultUdpTransportMapping(
                (UdpAddress) listenUdpAddress);
        DefaultTcpTransportMapping tcpTransport = <span class="keyword">new</span> DefaultTcpTransportMapping(
                (TcpAddress) listenTCPAddress);

        snmp = <span class="keyword">new</span> Snmp(dispatcher, udpTransport);
        snmp.addTransportMapping(tcpTransport);

        <span class="comment">//配置engine</span>
        OctetString localEngineID = <span class="keyword">new</span> OctetString(MPv3.createLocalEngineID());
        <span class="comment">//配置USM 和user，需要和发送trap的配置一样才可以成功接收trap</span>
        USM usm = <span class="keyword">new</span> USM(SecurityProtocols.getInstance(), localEngineID, <span class="number">0</span>);
        usm.updateUser(<span class="keyword">new</span> UsmUserEntry(<span class="keyword">new</span> OctetString(<span class="string">"luo"</span>), <span class="keyword">new</span> UsmUser(<span class="keyword">new</span> OctetString(<span class="string">"luo"</span>),
                <span class="literal">null</span>,
                <span class="literal">null</span>,
                <span class="literal">null</span>,
                <span class="literal">null</span>)));
        SecurityModels.getInstance().addSecurityModel(usm);
        snmp.getMessageDispatcher().addMessageProcessingModel(<span class="keyword">new</span> MPv3(usm));
        snmp.listen();
    }


    <span class="keyword">public</span> <span class="keyword">void</span> run() {
        <span class="keyword">try</span> {
            snmp.addCommandResponder(<span class="keyword">this</span>);
            System.out.println(<span class="string">"开始监听Trap信息!"</span>);
        } <span class="keyword">catch</span> (Exception ex) {
            ex.printStackTrace();
        }
    }

    <span class="comment">/**
     * 当接收到trap时，会自动进入这个方法
     *
     * @param respEvnt
     */</span>
    <span class="keyword">public</span> <span class="keyword">void</span> processPdu(CommandResponderEvent respEvnt) {
        <span class="comment">// 解析Response并且直接打印出来</span>
        <span class="keyword">if</span> (respEvnt != <span class="literal">null</span> &amp;&amp; respEvnt.getPDU() != <span class="literal">null</span>) {
            System.out.println(<span class="string">"security name = "</span> + <span class="keyword">new</span> OctetString(respEvnt.getSecurityName()));
            Vector&lt;? <span class="keyword">extends</span> VariableBinding&gt; recVBs = respEvnt.getPDU().getVariableBindings();
            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; recVBs.size(); i++) {
                VariableBinding recVB = recVBs.elementAt(i);
                System.out.println(recVB.getOid() + <span class="string">" : "</span> + recVB.getVariable());
            }
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws IOException {
        LocalTrapReceiver localTrapReceiver = <span class="keyword">new</span> LocalTrapReceiver();
        localTrapReceiver.run();
    }

}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>基于snmp4j收集数据或者发送v1版本的trap比较简单，可以自己动手网上搜索，这里展示下如何发送v3的trap（因为网络上搜索不到）<br>]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[启用WinRm]]></title>
    <link href="http://luoyuan800.github.io/2015/09/22/WinRm/"/>
    <id>http://luoyuan800.github.io/2015/09/22/WinRm/</id>
    <published>2015-09-22T06:45:50.000Z</published>
    <updated>2015-09-23T01:54:11.487Z</updated>
    <content type="html"><![CDATA[<p>如何在Windows上配置启用WinRm<a id="more"></a></p>
<h2 id="在windows_server_system上配置WinRm">在windows server system上配置WinRm</h2><ol>
<li>使用Administrator账号登陆目标机器（不是Administrator用户组，而是Administrator账号）。</li>
<li>使用命令<code>winrm enumerate winrm/config/listener</code>查看WinRm在当前的机器上是否因配置过。</li>
<li>如果没有返回消息，就表明WinRm没有成功配置。</li>
<li>执行 <code>winrm quickconfig</code> 初始化WinRm</li>
<li>执行命令<code>winrm set winrm/config/service/auth @{Basic=&quot;true&quot;}</code> 配置登陆方式</li>
<li>执行 <code>winrm set winrm/config/service @{AllowUnencrypted=&quot;true&quot;}</code> 配置加密方式</li>
<li>执行 <code>winrm enumerate winrm/config/listener</code> 查看WinR是否成功配置</li>
<li>如果发现还是不能执行WinRm命令的话，打开端口http和https<ol>
<li><code>winrm quickconfig -transport:https</code></li>
<li><code>winrm quickconfig -transport:http</code></li>
</ol>
</li>
<li>如果发现以上命令执行不成功，那么尝试参考下面的步骤： 更换登陆方式为negotiate</li>
</ol>
<h2 id="WinRm_登陆方式设置">WinRm 登陆方式设置</h2><h3 id="默认的WinRm登陆是使用Basic的，但是Basic模式下是不能修改WinRm的配置，只能读取数据。如果需要修改配置，首先我们需要配置登陆模式为negotiate。">默认的WinRm登陆是使用Basic的，但是Basic模式下是不能修改WinRm的配置，只能读取数据。如果需要修改配置，首先我们需要配置登陆模式为negotiate。</h3><ol>
<li>首先需要打开注册表<code>regedit</code></li>
<li>找到注册表<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\WSMAN\Service</code></li>
<li>修改键 <code>auth-negotiate</code> 为 1， <code>suth-basic</code> 为 0</li>
<li>重启系统</li>
</ol>
<h3 id="如果需要切换回Basic的登陆方式">如果需要切换回Basic的登陆方式</h3><ol>
<li>首先在Negotiate模式下执行<code>winrm set winrm/config/service/auth @{Basic=&quot;true&quot;}</code></li>
<li>然后再执行<code>winrm set winrm/config/service/auth @{Negotiate=&quot;false&quot;}</code></li>
</ol>
<h2 id="WinRm的用户组设置">WinRm的用户组设置</h2><ol>
<li>设定WinR用户组，我们可以指定特定的用户组具有访问WinRm的权限<ol>
<li>命令行执行lusrmgr.msc</li>
<li>在弹出窗口中选择users，然后选择你要给予权限的用户，点击右键选择properties</li>
<li>选择Member of的选项卡，在其中添加当前用户到某个指定用户组</li>
</ol>
</li>
<li>配置用户组权限<ol>
<li>有些情况下用户组权限是不能访问WinRm的，所以需要修改用户组的权限</li>
<li>执行命令<code>winrm set winrm/config/service @{RootSDDL=&quot;O:NSG:BAD:P(A;;GA;;;BA)(A;;GA;;;S-1-5-32-558)S:P(AU;FA;GA;;;WD)(AU;SA;GWGX;;;WD)&quot;}</code></li>
<li>这个命令是个SID为<code>S-1-5-32-558</code> 的用户组添加WinRm的控制权限</li>
</ol>
</li>
<li>还需要给将这个用户组添加到指定Namespace中<ol>
<li>命令行执行<code>wmimgmt.msc</code></li>
<li>弹出窗口中在 WMI Control上点击右键选择properties</li>
<li>选择Security 选项卡</li>
<li>找到root/cimv2, root, root/mscluster(这个是cluster环境下才有的）</li>
<li>分别选择namespaces 然后选择Security之后添加用户组到里面，并且要给予全部的权限（全部打勾）</li>
</ol>
</li>
<li>用户组额外的权限设置<ol>
<li>如果某些WinRm查询接口无法获得数据，可能是因为权限导致的</li>
<li>使用<code>sc sdshow SCMANAGER</code> 查看当前的权限</li>
<li>使用<code>sc sdset SCMANAGER D:(A;;CCLCRPRC;;;用户组SID)(A;;CC;;;AU)(A;;CCLCRPRC;;;IU)(A;;CCLCRPRC;;;SU)(A;;CCLCRPWPRC;;;SY)(A;;KA;;;BA)S:(AU;FA;KA;;;WD)(AU;OIIOFA;GA;;;WD)</code> 使得用户组获得权限</li>
<li>参考资料：<a href="http://blogs.msmvps.com/erikr/2007/09/26/set-permissions-on-a-specific-service-windows" target="_blank" rel="external">http://blogs.msmvps.com/erikr/2007/09/26/set-permissions-on-a-specific-service-windows</a>, and <a href="http://www.netid.washington.edu/documentation/domains/sddl.aspx" target="_blank" rel="external">http://www.netid.washington.edu/documentation/domains/sddl.aspx</a>.</li>
</ol>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何在Windows上配置启用WinRm]]>
    
    </summary>
    
      <category term="编程-网络协议" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM 启动参数设置]]></title>
    <link href="http://luoyuan800.github.io/2015/07/24/jvm-argument/"/>
    <id>http://luoyuan800.github.io/2015/07/24/jvm-argument/</id>
    <published>2015-07-24T08:57:43.000Z</published>
    <updated>2015-07-23T09:32:43.389Z</updated>
    <content type="html"><![CDATA[<p>JVM可以在启动的时候进行配置，大部分时候要进行调节的参数是为了优化运行效率，提升GC机制的执行效率。<br><a id="more"></a></p>
<h2 id="启用参数示例">启用参数示例</h2><pre><code>JAVA_OPTS="-server -XX:+UseParNewGC -Xms1024m -Xmx2048m 
    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:MaxNewSize=</span><span class="number">128</span>m -<span class="constant">XX</span><span class="symbol">:NewSize=</span><span class="number">128</span>m -<span class="constant">XX</span><span class="symbol">:PermSize=</span><span class="number">96</span>m 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:MaxPermSize=</span><span class="number">128</span>m -<span class="constant">XX</span><span class="symbol">:+UseConcMarkSweepGC</span> 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:+CMSPermGenSweepingEnabled</span> -<span class="symbol">verbose:</span>gc 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:+PrintGCDetails</span> -<span class="constant">XX</span><span class="symbol">:+PrintGCTimeStamps</span> 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:CMSInitiatingOccupancyFraction=</span><span class="number">1</span> -<span class="constant">XX</span><span class="symbol">:+CMSIncrementalMode</span>
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:MaxTenuringThreshold=</span><span class="number">0</span> -<span class="constant">XX</span><span class="symbol">:SurvivorRatio=</span><span class="number">20000</span> 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:+UseCMSCompactAtFullCollection</span> 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:CMSFullGCsBeforeCompaction=</span><span class="number">0</span>  
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:CMSIncrementalDutyCycleMin=</span><span class="number">10</span> -<span class="constant">XX</span><span class="symbol">:CMSIncrementalDutyCycle=</span><span class="number">30</span> 
</span>    -<span class="ruby"><span class="constant">XX</span><span class="symbol">:CMSMarkStackSize=</span><span class="number">8</span>M -<span class="constant">XX</span><span class="symbol">:CMSMarkStackSizeMax=</span><span class="number">32</span>M<span class="string">"</span></span>
</code></pre><h2 id="参数说明">参数说明</h2><h3 id="-server">-server</h3><p>一定要作为第一个参数，在多个CPU时提升性能（大概就是把JVM做为服务器使用）</p>
<h3 id="-Xmx1280m">-Xmx1280m</h3><p>设置JVM最大可用内存为1280m。最大可设为3550m。具体应用可适当调整。</p>
<h3 id="-Xms1280m">-Xms1280m</h3><p>设置JVM初始内存为1280m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</p>
<h3 id="-Xmn480m">-Xmn480m</h3><p>设置年轻代大小为480m。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。</p>
<h3 id="-Xss256k">-Xss256k</h3><p>设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p>
<h3 id="-XX:PermSize=64m">-XX:PermSize=64m</h3><p>指定 jvm 中 Perm Generation 的最小值。 这个参数需要看你的实际情况。可以通过jmap 命令看看到底需要多少。</p>
<h3 id="-XX:MaxPermSize=128m">-XX:MaxPermSize=128m</h3><p>指定 Perm Generation 的最大值</p>
<h3 id="-XX:+UseConcMarkSweepGC">-XX:+UseConcMarkSweepGC</h3><p>设置并发收集器</p>
<h3 id="-XX:ParallelGCThreads=8">-XX:ParallelGCThreads=8</h3><p>配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。</p>
<h3 id="-XX:CMSFullGCsBeforeCompaction=0">-XX:CMSFullGCsBeforeCompaction=0</h3><p>由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。</p>
<h3 id="-XX:+UseCMSCompactAtFullCollection">-XX:+UseCMSCompactAtFullCollection</h3><p>打开对年老代的压缩。可能会影响性能，但是可以消除碎片。</p>
<h3 id="-XX:SurvivorRatio=8">-XX:SurvivorRatio=8</h3><p>每个survivor space 和 eden之间的比例。</p>
<h3 id="-XX:MaxTenuringThreshold=7">-XX:MaxTenuringThreshold=7</h3><p>设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。</p>
<h3 id="-XX:GCTimeRatio=19">-XX:GCTimeRatio=19</h3><p>设置垃圾回收时间占程序运行时间的百分比，公式为1/(1+n)。</p>
<h3 id="-Xnoclassgc">-Xnoclassgc</h3><p>禁用类垃圾回收，性能会有一定提高。</p>
<h3 id="-XX:+DisableExplicitGC">-XX:+DisableExplicitGC</h3><p>当此参数打开时，在程序中调用System.gc()将会不起作用。默认是off。</p>
<h3 id="-XX:+UseParNewGC">-XX:+UseParNewGC</h3><p>设置年轻代为并行收集。可与CMS收集同时使用。</p>
<h3 id="-XX:-CMSParallelRemarkEnabled">-XX:-CMSParallelRemarkEnabled</h3><p>在使用 UseParNewGC 的情况下 , 尽量减少 mark 的时间。</p>
<h3 id="-XX:CMSInitiatingOccupancyFraction=70">-XX:CMSInitiatingOccupancyFraction=70</h3><p>指示在 old generation 在使用了 70% 的比例后 , 启动 concurrent collector。</p>
<h3 id="-XX:SoftRefLRUPolicyMSPerMB=0">-XX:SoftRefLRUPolicyMSPerMB=0</h3><p>每兆堆空闲空间中SoftReference的存活时间。</p>
<h3 id="-verbose">-verbose</h3><p>显示垃圾收集信息</p>
<h3 id="-Xloggc:gc-log">-Xloggc:gc.log</h3><p>指定垃圾收集日志文件（记录垃圾回收的日志）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>JVM可以在启动的时候进行配置，大部分时候要进行调节的参数是为了优化运行效率，提升GC机制的执行效率。<br>]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM 垃圾回收器]]></title>
    <link href="http://luoyuan800.github.io/2015/07/23/jvm-gc/"/>
    <id>http://luoyuan800.github.io/2015/07/23/jvm-gc/</id>
    <published>2015-07-23T08:57:43.000Z</published>
    <updated>2015-07-23T08:58:31.538Z</updated>
    <content type="html"><![CDATA[<p>简单列举了JVM中使用的集中垃圾收集器<a id="more"></a></p>
<h2 id="新生代收集器">新生代收集器</h2><h3 id="Serial">Serial</h3><p>Serial收集器的机制被称为“Stop the word”。它属于单线程收集器，进行垃圾收集GC的时候会暂停所有的用户线程，采用复制算法进行GC。<br>这个收集器适用于Client端，因为它对于小内存的收集来说尤为高效，停顿时间也比较短。</p>
<h3 id="ParNew">ParNew</h3><p>ParNew收集器同样是使用“Stop the word”机制。但是它是多线程的。如果是运行在多cpu的服务器上的时候，首选这种收集器。</p>
<h3 id="Parallel_Scavenger">Parallel Scavenger</h3><p>这是一个吞吐量优先的垃圾收集器，采用多线程机制。</p>
<h2 id="年老代收集器">年老代收集器</h2><h3 id="Serial_Old">Serial Old</h3><p>和Serial相对应，是年老代收集器，使用单线程的和标记-整理算法进行垃圾回收。</p>
<h3 id="Parallel_Old">Parallel Old</h3><p>是Parallel Scavenge收集器的年老代版本。使用多线程和标记-整理算法，主要是服务端模式下和Parallel Scavenge收集器组合使用。</p>
<h3 id="CMS（Current_Mark_Sweep)">CMS（Current Mark Sweep)</h3><p>CMS是对年老带的进行对象回收，这是一个额外的回收管理机制，基于标记-清除算法实现。它的特点是JVM的停顿时间较短（普通的年老代回收机制就有较长时间的JVM响应停顿），因此CMS主要可以应用于对响应时间有较高要求的服务器上。由于收集完成后会产生碎片，所以要开启 <code>-XXUseCMSCompactAtFullCollection</code>开关参数，表示在Full GC之后，要进行一次碎片整理。开启CMS需要使用额外的参数启用它 ：在启动JVM参数加上<code>-XX:+UseConcMarkSweepGC</code>。</p>
<h4 id="CMS的运作阶段">CMS的运作阶段</h4><p><img src="http://7xk7ce.com1.z0.glb.clouddn.com/cms.png" alt=""></p>
<ul>
<li>初始标记 ：在这个阶段，需要虚拟机停顿正在执行的任务，Stop The Word。这个过程从垃圾回收的”根对象”开始，只扫描到能够和”根对象”直接关联的对象，并作标记。所以这个过程虽然暂停了整个JVM，但是很快就完成了。</li>
<li>并发标记 ：这个阶段紧随初始标记阶段，在初始标记的基础上继续向下追溯标记。并发标记阶段，应用程序的线程和并发标记的线程并发执行，所以用户不会感受到停顿。</li>
<li>并发预清理 ：并发预清理阶段仍然是并发的。在这个阶段，虚拟机查找在执行并发标记阶段新进入老年代的对象(可能会有一些对象从新生代晋升到老年代， 或者有一些对象被分配到老年代)。通过重新扫描，减少下一个阶段”重新标记”的工作，因为下一个阶段会Stop The World。</li>
<li>重新标记 ：这个阶段会暂停虚拟机，收集器线程扫描在CMS堆中剩余的对象。扫描从”根对象”开始向下追溯，并处理对象关联。</li>
<li>并发清理 ：清理垃圾对象，这个阶段收集器线程和应用程序线程并发执行。</li>
<li>并发重置 ：这个阶段，重置CMS收集器的数据结构，等待下一次垃圾回收。</li>
</ul>
<h3 id="G1(Garbage_First)">G1(Garbage First)</h3><p>G1将整个JAVA堆（包括新生代、老年代）划分为多个固定大小的独立区域，并跟踪垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，有限回收垃圾最多的区域。 它是基于标记-整理算法实现的，并且具有非常准确的控制停顿。</p>
<h2 id="各个收集器的可用组合">各个收集器的可用组合</h2><p>图例表示了各个收集器组合可能性，如果两个收集器之间存在连线，表明他们可以一起组合使用。<br><img src="http://7xk7ce.com1.z0.glb.clouddn.com/relationship.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单列举了JVM中使用的集中垃圾收集器]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Java进行文本加密]]></title>
    <link href="http://luoyuan800.github.io/2015/07/22/java-encode/"/>
    <id>http://luoyuan800.github.io/2015/07/22/java-encode/</id>
    <published>2015-07-22T07:58:00.000Z</published>
    <updated>2015-07-22T08:07:29.252Z</updated>
    <content type="html"><![CDATA[<p>通用的加密模式可以分为对称加密、不对称加密、单向加密（不可逆加密）。偶然想要查询下如何在java中进行文本加密，网上搜索到的都是大篇幅介绍加密原理，如何使用却都是一句话带过，真真是看着就烦。所以本文不涉及加密原理和概念，只是列举了如何使用java进行加密的例子，作为参考使用。<a id="more"></a></p>
<h2 id="MD5">MD5</h2><p>不可逆加密指的是使用MD5或者SHA进行加密，其本质是抽取特征码，抽取出来的密文是不可逆向解密回原来的文本的。这种方式大多用于密码的存储——只在数据库中存储抽取的特征码，而不存储原来的密码。</p>
<pre><code>MessageDigest md5 = MessageDigest.getInstance<span class="params">(<span class="string">"MD5"</span>)</span>;
BASE64Encoder base64Encoder = new BASE64Encoder<span class="params">()</span>;
String info = base64Encoder.encode<span class="params">(md5.digest<span class="params">(<span class="string">"luoyuan"</span>.getBytes<span class="params">(<span class="string">"utf-8"</span>)</span>)</span>)</span>;
System.out.println<span class="params">(info)</span>;
</code></pre><p>其中<code>getInstance(String)</code>的取值是限定的，如果传入的不是以下的字符串之一，就会抛出<code>NoSuchAlgorithmException</code></p>
<ul>
<li>MD5</li>
<li>MD2</li>
<li>SHA-1</li>
<li>SHA-256</li>
<li>SHA-384</li>
<li>SHA-512</li>
</ul>
<h2 id="AES">AES</h2><p>AES和DES的使用方式在Java中都差不多，所以不在此处提及DES的使用范例。<br>AES加密方式属于对称加密，加密和解密都需要使用一样的密钥。所以在加密时候使用的密钥要和密文一起发送。</p>
<h3 id="加密">加密</h3><pre><code>String mess = <span class="string">"luoyuan"</span>;
KeyGenerator keyGenerator = KeyGenerator.getInstance<span class="params">(<span class="string">"AES"</span>)</span>;<span class="comment">//获取一个AES相关的KeyGenerator</span>
keyGenerator.init<span class="params">(<span class="number">128</span>)</span>;<span class="comment">//指定生成密钥的长度为128</span>
SecretKey key = keyGenerator.generateKey<span class="params">()</span>;<span class="comment">//生成一个密钥</span>
Cipher cipher = Cipher.getInstance<span class="params">(<span class="string">"AES/ECB/PKCS5Padding"</span>)</span>;<span class="comment">//构建Cipher,设置模式，解密的时候也必须使用同样的模式</span>
cipher.init<span class="params">(Cipher.ENCRYPT_MODE, key)</span>;<span class="comment">//使用生成的密钥初始化</span>
byte[] encode = cipher.doFinal<span class="params">(mess.getBytes<span class="params">(<span class="string">"utf-8"</span>)</span>)</span>;<span class="comment">//执行加密过程</span>
System.out.println<span class="params">(Arrays.toString<span class="params">(encode)</span>)</span>;
</code></pre><h3 id="解密">解密</h3><pre><code>byte[] keyCode = <span class="decorator">{...}</span>;//加密过程生成的密钥的encoded
byte[] data = <span class="decorator">{...}</span>;//加密后的文本字节数组
<span class="type">SecretKey</span> key = new <span class="type">SecretKeySpec</span>(keyCode, <span class="string">"AES"</span>);//根据给出的密钥（字节数组）生成一个<span class="type">Key</span>对象
<span class="type">Cipher</span> cipher = <span class="type">Cipher</span>.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>); //生成一个和加密时候使用的模式一样的<span class="type">Cipher</span>
cipher.init(<span class="type">Cipher</span>.<span class="type">DECRYPT_MODE</span>, key);
byte[] decode = cipher.doFinal(data);//执行解密步骤
<span class="type">System</span>.<span class="keyword">out</span>.println(new <span class="type">String</span>(decode));
</code></pre><h2 id="RSA">RSA</h2><p>RSA(DSA)加密属于非对称加密，加密解密过程会使用到不同的密钥——公钥和私钥。<br>如果使用公钥加密，那么解密可以使用私钥解密，如果使用私钥加密，则必须使用公钥进行解密。</p>
<h3 id="加密-1">加密</h3><pre><code>String msg = <span class="string">"Luoyuan"</span>;
KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance<span class="params">(<span class="string">"RSA"</span>)</span>;<span class="comment">//初始化一个KeyPairGenerator</span>
keyGenerator.initialize<span class="params">(<span class="number">1024</span>)</span>;<span class="comment">//设置密钥长度为1024</span>
KeyPair keyPair = keyGenerator.generateKeyPair<span class="params">()</span>;<span class="comment">//RSA加密需要生成相对应的公钥和私钥</span>
RSAPrivateKey privateKey = <span class="params">(RSAPrivateKey)</span> keyPair.getPrivate<span class="params">()</span>;<span class="comment">//获得私钥</span>
RSAPublicKey publicKey = <span class="params">(RSAPublicKey)</span> keyPair.getPublic<span class="params">()</span>;<span class="comment">//获得公钥</span>
Cipher cipher = Cipher.getInstance<span class="params">(<span class="string">"RSA"</span>)</span>;
cipher.init<span class="params">(Cipher.ENCRYPT_MODE, privateKey)</span>;<span class="comment">//使用私钥加密</span>
byte[] encode = cipher.doFinal<span class="params">(msg.getBytes<span class="params">(<span class="string">"utf-8"</span>)</span>)</span>;
System.out.println<span class="params">(Arrays.toString<span class="params">(encode)</span>)</span>;
</code></pre><h3 id="解密-1">解密</h3><pre><code>byte[] publicKeyCode = <span class="decorator">{...}</span>;
byte[] encode = <span class="decorator">{...}</span>;
<span class="type">Cipher</span> cipher = <span class="type">Cipher</span>.getInstance(<span class="string">"RSA"</span>);
<span class="type">RSAPublicKey</span> publicKey = new <span class="type">RSAPublicKeyImpl</span>(publicKeyCode);//根据公钥的encode构建公钥对象
cipher.init(<span class="type">Cipher</span>.<span class="type">DECRYPT_MODE</span>, publicKey);//使用公钥解密
byte[] decode = cipher.doFinal(encode);
<span class="type">System</span>.<span class="keyword">out</span>.println(new <span class="type">String</span>(decode));
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>通用的加密模式可以分为对称加密、不对称加密、单向加密（不可逆加密）。偶然想要查询下如何在java中进行文本加密，网上搜索到的都是大篇幅介绍加密原理，如何使用却都是一句话带过，真真是看着就烦。所以本文不涉及加密原理和概念，只是列举了如何使用java进行加密的例子，作为参考使用。]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式进阶]]></title>
    <link href="http://luoyuan800.github.io/2015/07/15/java-regex/"/>
    <id>http://luoyuan800.github.io/2015/07/15/java-regex/</id>
    <published>2015-07-15T08:19:43.000Z</published>
    <updated>2015-07-23T06:21:35.351Z</updated>
    <content type="html"><![CDATA[<p>正则表达式的作用在我看来是：匹配、查找、替换三种。使用正则表达式也算是粗粗入门了，至少已经可以写一些简单的表达式来进行字符串的匹配了，而且也会从网络上拷贝别人的一些比较复杂的表达式……那么就学习一些进阶的东西吧。包括 捕获组和非捕获组，匹配模式解析。（本文中的正则表达式均是Java中可以使用的格式，<code>\\</code>表示普通正则表达式中的<code>\</code>）<a id="more"></a></p>
<h2 id="组的概念">组的概念</h2><p>首先了解正则表达式中组的概念，在正则表示中组的应用是非常广泛的，只是我们经常没有在意组的真正用法：抽取字符串。一般我们使用正则表达式都只是使用它的匹配功能，只需要验证目标文本是否符合要求。那么如果我们要应用到正则表达式的抽取字符串和替换的时候，组就可以提供我们正确的获得查找结果。<br>Java中组是使用()来表示，一个()表示一个组，在匹配过程中，是依次按照组进行文本匹配，当匹配到当前组之后，就会使用余下的文本来匹配下一个组。</p>
<h3 id="捕获组">捕获组</h3><p>顾名思义，捕获组就是会捕获我们需要匹配的字符串进而提供给我们抽取。<br>如果有一个正则表达<code>(\\w+)(\\d{3}).*</code>，那么这个表达式中包含3个捕获组，分别为代表整个表达式的组0：<code>\\w\\d{3}.*</code> 组1为<code>\\w+</code> 这里表示匹配一个或多个字符，组2为<code>\\d{3}</code>匹配正好3个数字字符。那么我们可以用这个表达式去抽取文本中的连续的三个数字。</p>
<h3 id="非捕获组">非捕获组</h3><p>以上提到的组都是属于捕获组，就是会匹配这个组的字符串，并且抽取到组中。Java中还有非捕获组的概念，即是一个非的概念。以 (<code>?</code>) 开头的组是纯的非捕获组，它不捕获文本，也不针对组合计进行计数。就是说，如果小括号中以?号开头，那么这个分组就不会抽取文本。Java中支持的非捕获组并不多（请忽略专业的概念术语）</p>
<ul>
<li><code>(?=X)</code>     X，通过零宽度的正 lookahead 即左侧匹配</li>
<li><code>(?!X)</code>     X，通过零宽度的负 lookahead 即左侧匹配 </li>
<li><code>(?&lt;=X)</code>     X，通过零宽度的正 lookbehind 即右侧匹配 </li>
<li><code>(?&lt;!X)</code>     X，通过零宽度的负 lookbehind 即右侧匹配 </li>
</ul>
<p>非捕获组中四个表达式的区别：</p>
<ul>
<li><code>(?=X )</code> 和<code>(?!X)</code>用于右侧匹配</li>
<li><code>(?&lt;=X)</code>和<code>(?&lt;!X)</code>用于左侧匹配</li>
</ul>
<p>被非捕获组匹配的到的字符串，最后是不会被抽取出来的。所以非捕获组是应用于更加精确的定位某段字符串而存在的。下面是几个非捕获组的范例<br>匹配用字符串： <code>abc12dd344oo</code></p>
<ul>
<li><code>(?&lt;=abc)(\\d+)</code> 匹配左侧为abc的数字串，分组为组(1) = 12</li>
<li><code>(?&lt;!abc)(\\d+)</code> 匹配左侧不是abc的数字串，分组为组（1） = 2 和 344. 注意这个正则表达式会导致匹配失控，因为可以匹配到的分组有两个。</li>
<li><code>(\\d+)(?=dd)</code> 匹配右侧为dd的数字串， 分组为组（1） = 12</li>
<li><code>(\\d+)(?!dd)</code> 匹配右侧不是dd的数字串， 分组为组（1） = 1 和344. 同样，这个表达式在Java中也是会失控。</li>
</ul>
<h3 id="Java中根据组来抽取字符串">Java中根据组来抽取字符串</h3><p>字符串的抽取需要用到java中的Pattern和Matcher来进行。</p>
<pre><code>Pattern pattern = Pattern.compile<span class="params">(“\\w+<span class="params">(\\d{<span class="number">3</span>})</span>.*”)</span>;
Matcher matcher = pattern.matcher<span class="params">(“aaaa123aaaa”)</span>;
<span class="keyword">if</span><span class="params">(matcher.find<span class="params">()</span>)</span>{
    String nums = matcher.group<span class="params">(<span class="number">1</span>)</span>;
}
</code></pre><p>其中<code>Matcher.group(int)</code>方法中传入的就是这个要查找的组的序号。如果传入的序号大于表达式中组的实际个数，那么会抛出异常。</p>
<h2 id="匹配模式">匹配模式</h2><p>在有了组的基本概念之后，再来讨论Java中的正则表达式在匹配中使用到的三种模式</p>
<h3 id="贪婪模式">贪婪模式</h3><p>没有加上其他模式标识的普通模式就是贪婪模式，在日常应用中我们最常用的模式就贪婪模式。贪婪模式总是尽可能的去匹配文本，以期望能够返回匹配成功。贪婪模式其实效率最为差的一种模式，因为在匹配过程中他首先从整个文本开始进行匹配，然后会大量的回溯文本，并且是一个一个字符进行回溯，越是长的文本，在贪婪模式下匹配效率越差。</p>
<h3 id="勉强模式">勉强模式</h3><p>与贪婪模式相反，该模式是从第一个字符开始向后进行匹配，只是匹配尽量少的文本，所以除非最差的情况下，该模式的匹配次数会比贪婪模式少。勉强模式的标识是在传统的贪婪模式的组表达式后面增加一个<code>?</code> 。</p>
<h3 id="占有模式">占有模式</h3><p>这种模式是Java特有的模式，它只会对整个文本匹配一次，不会回溯。这种模式的速度是最快的，因为只是匹配一次。Java编程思想中提到，这个模式可以防止正则表达式失控，也可以减少匹配过程中因为要保存回溯信息而占用的空间。占有模式的标识是在传统的贪婪模式组表达式后面增加一个<code>+</code> 。</p>
<h3 id="模式在文本匹配中的影响">模式在文本匹配中的影响</h3><p>对应同一个文本，不同的模式会返回不同的匹配结果.假定要分析的字符串是<code>xfooxxxxxxfoo</code>(来源网络）</p>
<ul>
<li>模式<code>.*foo</code> （贪婪模式）: 模式分为子模式<code>p1(.*)</code>和子模式<code>p2(foo)</code>两个部分. 其中p1中的量词匹配方式使用默认方式(贪婪型)。匹配开始时,吃入所有字符<code>xfooxxxxxx</code>去匹配子模式p1。匹配成功,但这样以来就没有了字符串去匹配子模式p2。本轮匹配失败；第二轮：减少p1部分的匹配量，吐出最后一个字符, 把字符串分割成<code>xfooxxxxxxfo</code>和<code>o</code>两个子字符串s1和s2。 s1匹配p1, 但s2不匹配p2。本轮匹配失败；第三轮，再次减少p1部分匹配量，吐出两个字符, 字符串被分割成<code>xfooxxxxxxfo</code>和<code>oo</code>两部分。结果同上。第四轮，再次减少p1匹配量, 字符串分割成<code>xfooxxxxxx</code>和<code>foo</code>两个部分, 这次s1/s2分别和p1/p2匹配。停止尝试,返回匹配成功。</li>
<li>模式<code>.*?foo</code> （勉强模式）: 最小匹配方式。第一次尝试匹配, p1由于是0或任意次，因此被忽略，用字符串去匹配p2,失败；第二次，读入第一个字符<code>x</code>, 尝试和p1匹配, 匹配成功; 字符串剩余部分<code>fooxxxxxxfoo</code>中前三个字符和p2也是匹配的. 因此, 停止尝试, 返回匹配成功。在这种模式下，如果对剩余字符串继续去寻找和模式相匹配的子字符串，还会找到字符串末尾的另一个<code>xfoo</code>，而在贪婪模式下，由于第一次匹配成功的子串就已经是所有字符，因此不存在第二个匹配子串。</li>
<li>模式<code>.*+foo</code> （占有模式）:匹配开始时读入所有字符串, 和p1匹配成功, 但没有剩余字符串去和p2匹配。因此, 匹配失败。返回。</li>
</ul>
<p>再看下面一个例子：贪婪模式与占有模式的比较</p>
<blockquote>
<p>正则：<code>\\w+[a-z]</code>与<code>\\w++[a-z]</code><br>目标串：<code>232hjdhfd7474$</code></p>
</blockquote>
<p>分析:</p>
<ul>
<li><code>\\w+[a-z]</code>：<code>\\w+</code>属于贪婪模式，会一次性吃掉它所能吃掉的所有的字符，也就是子串<code>232hjdhfd7474</code>，此时<code>[a-z]</code>不能够找到匹配了，故<code>\w+</code>匹配的串会吐出一个字符<code>4</code>，但此时还是得不到匹配。反复的这样吐出回退，直到吐出字符<code>d</code>时，此时<code>[a-z]</code>能够匹配h，所以这时正则表达式会返回一次成功的匹配结果，为<code>232hjdhfd</code></li>
<li><code>\\w++[a-z]</code>：<code>\\w++</code>属于侵占模式，它会一次性吃掉它所能够吃掉的所有字符，即子串<code>232hjdhfd7474</code>，而且不留给其他部分使用，故不会回退。此时<code>[a-z]</code>不能够找到匹配，所以此次匹配失败。在余下的子串中也找不到能匹配成功的子串。所以整个正则表达式是找不到匹配结果的！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>正则表达式的作用在我看来是：匹配、查找、替换三种。使用正则表达式也算是粗粗入门了，至少已经可以写一些简单的表达式来进行字符串的匹配了，而且也会从网络上拷贝别人的一些比较复杂的表达式……那么就学习一些进阶的东西吧。包括 捕获组和非捕获组，匹配模式解析。（本文中的正则表达式均是Java中可以使用的格式，<code>\\</code>表示普通正则表达式中的<code>\</code>）]]>
    
    </summary>
    
      <category term="编程-Java" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux系统中的进程状态]]></title>
    <link href="http://luoyuan800.github.io/2015/07/11/Linux-progress-status/"/>
    <id>http://luoyuan800.github.io/2015/07/11/Linux-progress-status/</id>
    <published>2015-07-11T09:21:15.000Z</published>
    <updated>2016-07-26T03:46:26.003Z</updated>
    <content type="html"><![CDATA[<p>Linux系统进程状态注解<a id="more"></a></p>
<h2 id="Deep_Sleep">Deep Sleep</h2><p>D Uninterruptible sleep (usually IO)<br>不可中断的深度睡眠，一般由IO引起，同步IO在做读或写操作时，此进程不能做其它事情，只能等待，这时进程处于这种状态，如果程序采用异步IO，这种状态应该就很少见到了</p>
<h2 id="Running">Running</h2><p>R Running or runnable (on run queue)<br>进程处于运行或就绪状态</p>
<h2 id="Interrupt">Interrupt</h2><p>S Interruptible sleep (waiting for an event to complete)<br>可接收信号的睡眠状态，sleep函数可演示这种状态</p>
<h2 id="Stop">Stop</h2><p>T Stopped, either by a job control signal or because it is being traced.<br>被ctrl+z中断或被trace</p>
<h2 id="Paging">Paging</h2><p>W paging (not valid since the 2.6.xx kernel) </p>
<h2 id="Dead">Dead</h2><p>X dead (should never be seen)<br>进程已经完全死掉，不可能看见这种状态的</p>
<h2 id="Zombie">Zombie</h2><p>Z Defunct (“zombie”) process, terminated but not reaped by its parent.<br>进程已经终止，但是其父进程没有来及处理它，多进程写不好的话，这种状态是常见的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Linux系统进程状态注解]]>
    
    </summary>
    
      <category term="编程-Linux/Unix" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Linux-Unix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux的分区]]></title>
    <link href="http://luoyuan800.github.io/2015/07/10/Linux-partition/"/>
    <id>http://luoyuan800.github.io/2015/07/10/Linux-partition/</id>
    <published>2015-07-10T08:47:16.000Z</published>
    <updated>2016-07-26T03:46:31.766Z</updated>
    <content type="html"><![CDATA[<p>简单了解Linux文件系统的管理（磁盘管理）。<a id="more"></a></p>
<h2 id="设备管理">设备管理</h2><p>在 Linux 中，每一个硬件设备都映射到一个系统的文件，对于硬盘、光驱等 IDE 或 SCSI 设备也不例外。Linux把各种 IDE 设备分配了一个由 hd 前缀组成的文件；而对于各种 SCSI 设备，则分配了一个由 sd 前缀组成的文件。<br>对于ide硬盘，驱动器标识符为“hdx~”,其中“hd”表明分区所在设备的类型，这里是指ide硬盘了。“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,“~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个ide硬盘上的第三个主分区或扩展分区,hdb2表示为第二个ide硬盘上的第二个主分区或扩展分区。对于scsi硬盘则标识为“sdx~”，scsi硬盘是用“sd”来表示分区所在设备的类型的，其余则和ide硬盘的表示方法一样，不在多说。<br>例如，第一个 IDE 设备，Linux 就定义为 hda；第二个 IDE 设备就定义为 hdb；下面以此类推。而 SCSI 设备就应该是 sda、sdb、sdc 等。</p>
<h2 id="分区编号">分区编号</h2><p>要进行分区就必须针对每一个硬件设备进行操作，这就有可能是一块IDE硬盘或是一块SCSI硬盘。对于每一个硬盘（IDE 或 SCSI）设备，Linux 分配了一个 1 到 16 的序列号码，这就代表了这块硬盘上面的分区号码。</p>
<ul>
<li>例如，第一个 IDE 硬盘的第一个分区，在 Linux 下面映射的就是 hda1，第二个分区就称作是 hda2。</li>
<li>对于SCSI 硬盘则是 sda1、sdb1 等。</li>
</ul>
<h2 id="分区的作用">分区的作用</h2><p>在 Linux 中规定，每一个硬盘设备最多能有 4个主分区（其中包含扩展分区）构成，任何一个扩展分区都要占用一个主分区号码，也就是在一个硬盘中，主分区和扩展分区一共最多是 4 个。</p>
<blockquote>
<p>对于早期的 DOS 和 Windows（Windows 2000 以前的版本），系统只承认一个主分区，可以通过在扩展分区上增加逻辑盘符（逻辑分区&gt;&gt;的方法，进一步地细化分区。</p>
</blockquote>
<h3 id="主分区">主分区</h3><p>主分区的作用就是计算机用来进行启动操作系统的，因此每一个操作系统的启动，或者称作是引导程序，都应该存放在主分区上。这就是主分区和扩展分区及逻辑分区的最大区别。我们在指定安装引导 Linux 的 bootloader 的时候，都要指定在主分区上，就是最好的例证。<br>Linux 规定了主分区（或者扩展分区）占用 1 至 16 号码中的前 4 个号码。以第一个 IDE 硬盘为例说明，主分区（或者扩展分区）占用了 hda1、hda2、hda3、hda4，而逻辑分区占用了 hda5 到 hda16 等 12 个号码。因此，Linux 下面每一个硬盘总共最多有 16 个分区。</p>
<h3 id="扩展分区">扩展分区</h3><p>除了主分区占用的空间，余下的空间划分出来的分区都被称为扩展分区。</p>
<h3 id="逻辑分区">逻辑分区</h3><p>对于逻辑分区，Linux 规定它们必须建立在扩展分区上（在 DOS 和 Windows 系统上也是如此规定），而不是主分区上。因此，我们可以看到扩展分区能够提供更加灵活的分区模式，但不能用来作为 操作系统 的引导。 除去上面这些各种分区的差别，我们就可以简单地把它们一视同仁了。</p>
<h2 id="分区指标">分区指标　　</h2><p>对于每一个 Linux 分区来讲，分区的大小和分区的类型是最主要的指标。分区的类型规定了这个分区上面的文件系统的格式。<br>Linux 支持多种的文件系统格式，其中包含了我们熟悉的FAT32、FAT16、NTFS、HP-UX，以及各种 Linux 特有的 Linux Native和 Linux Swap分区类型。在 Linux 系统中，可以通过分区类型号码来区别这些不同类型的分区。可以参考我的另外一篇博文来了解Linux分区的类型（也可以称为文件系统类型）<a href="/2015/07/01/linux-filesystem-types/" title="Linux文件系统类型">Linux文件系统类型</a>。</p>
<h2 id="常用分区介绍">常用分区介绍</h2><ul>
<li>/boot分区，它包含了操作系统的内核和在启动系统过程中所要用到的文件，建这个 分区是有必要的，因为目前大多数的pc机要受到bios的限制,况且如果有了一个单独的/boot启动分区，即使主要的根分区出现了问题，计算机依然能够 启动。这个分区的大小约在50mb—100mb之间。但是如果想用lilo启动red hat linux系统的话，含有/boot的分区必须完全在柱面1023以下。又由于8gb后的数据lilo不能读取，所以red hat - linux要安装在8gb的区域以内。</li>
<li>/usr分区，是red hat linux系统存放软件的地方，如有可能应将最大空间分给它。</li>
<li>/home分区，是用户的home目录所在地，这个分区的大小取决于有多少用户。如 果是多用户共同使用一台电脑的话，这个分区是完全有必要的，况且根用户也可以很好地控制普通用户使用计算机，如对用户或者用户组实行硬盘限量使用，限制普 通用户访问哪些文件等。其实单用户也有建立这个分区的必要，因为没这个分区的话，那么你只能以根用户的身份登陆系统，这样做是危险的，因为根用户对系统有 绝对的使用权，可一旦你对系统进行了误操作，麻烦也就来了。</li>
<li>/var/log分区，是系统日志记录分区，如果设立了这一单独的分区，这样即使系统的日志文件出现了问题，它们也不会影响到操作系统的主分区。</li>
<li>/tmp分区，用来存放临时文件。这对于多用户系统或者网络服务器来说是有必要的。 这样即使程序运行时生成大量的临时文件，或者用户对系统进行了错误的操作，文件系统的其它部分仍然是安全的。因为文件系统的这一部分仍然还承受着读写操 作，所以它通常会比其它的部分更快地发生问题。</li>
<li>/bin分区，存放标准系统实用程序。</li>
<li>/dev分区，存放设备文件。</li>
<li>/opt分区，存放可选的安装的软件。</li>
<li>/sbin分区，存放标准系统管理文件。</li>
</ul>
<p>上面介绍了几个常用的分区，一般来说我们需要一个swap分区，一个/boot分区，一个/usr分区，一个/home 分区，一个/var/log分区。当然这没有什么规定，完全是依照你个人来定的。但记住至少要有两个分区，一个swap分区，一个/分区。</p>
<h2 id="查看分区的常用命令">查看分区的常用命令</h2><h3 id="mount">mount</h3><p>mount命令用来查看那些已经分配了mountpoint的文件系统</p>
<pre><code>:~$ mount
/dev/sda1 on / <span class="keyword">type</span> ext4 (rw,errors=remount-ro,user_xattr)
<span class="keyword">proc</span> on /<span class="keyword">proc</span> <span class="keyword">type</span> <span class="keyword">proc</span> (rw,noexec,nosuid,nodev)
none on /sys <span class="keyword">type</span> sysfs (rw,noexec,nosuid,nodev)
none on /sys/fs/fuse/connections <span class="keyword">type</span> fusectl (rw)
none on /sys/kernel/debugtype debugfs (rw)
none on /sys/kernel/security <span class="keyword">type</span> securityfs (rw)
none on /dev <span class="keyword">type</span> devtmpfs (rw,mode=<span class="number">0755</span>)
none on /dev/pts <span class="keyword">type</span> devpts (rw,noexec,nosuid,gid=<span class="number">5</span>,mode=<span class="number">0620</span>)
none on /dev/shm <span class="keyword">type</span> tmpfs (rw,nosuid,nodev)
none on /<span class="keyword">var</span>/runtype tmpfs (rw,nosuid,mode=<span class="number">0755</span>)
none on /<span class="keyword">var</span>/lock <span class="keyword">type</span> tmpfs (rw,noexec,nosuid,nodev)
none on /lib/init/rw <span class="keyword">type</span> tmpfs (rw,nosuid,mode=<span class="number">0755</span>)
none on /<span class="keyword">var</span>/lib/ureadahead/debugfs <span class="keyword">type</span> debugfs (rw,relatime)
none on /<span class="keyword">proc</span>/fs/vmblock/mountPoint <span class="keyword">type</span> vmblock (rw)
binfmt_misc on /<span class="keyword">proc</span>/sys/fs/binfmt_misc <span class="keyword">type</span> binfmt_misc (rw,noexec,nosuid,nodev)
gvfs-fuse-daemon on /home/kysnail/.gvfs <span class="keyword">type</span> fuse.gvfs-fuse-daemon (rw,nosuid,nodev,user=kysnail)
</code></pre><h3 id="df">df</h3><p>df命令可以查看文件系统的分区大小， 使用-l参数可以只参看本地文件系统。</p>
<pre><code>:~$ df -lhT
文件系统      类型    容量  已用 可用 已用% 挂载点
/dev/sda1     ext4     19G   11G  <span class="number">7</span>.8G  <span class="number">57</span>% /
<span class="keyword">none</span>      devtmpfs    498M  248K  497M   <span class="number">1</span>% /dev
<span class="keyword">none</span>         tmpfs    502M  252K  501M   <span class="number">1</span>% /dev/shm
<span class="keyword">none</span>         tmpfs    502M   96K  502M   <span class="number">1</span>% /<span class="keyword">var</span>/run
<span class="keyword">none</span>         tmpfs    502M     <span class="number">0</span>  502M   <span class="number">0</span>% /<span class="keyword">var</span>/lock
<span class="keyword">none</span>         tmpfs    502M     <span class="number">0</span>  502M   <span class="number">0</span>% /lib/<span class="keyword">init</span>/rw
<span class="keyword">none</span>       debugfs     19G   11G  <span class="number">7</span>.8G  <span class="number">57</span>% /<span class="keyword">var</span>/lib/ureadahead/debugfs
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>简单了解Linux文件系统的管理（磁盘管理）。]]>
    
    </summary>
    
      <category term="编程-Linux/Unix" scheme="http://luoyuan800.github.io/categories/%E7%BC%96%E7%A8%8B-Linux-Unix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown 语法说明]]></title>
    <link href="http://luoyuan800.github.io/2015/07/07/Markdown/"/>
    <id>http://luoyuan800.github.io/2015/07/07/Markdown/</id>
    <published>2015-07-07T02:51:34.000Z</published>
    <updated>2015-07-07T07:14:19.327Z</updated>
    <content type="html"><![CDATA[<p>Markdown是一种标记语言，主要用于网页上文本格式设置。它的使得我们可以使用普通的文本编辑器编辑网页文本。在页面显示用Markdown语法的文本，需要先转换为HTML格式再进行显示。Markdown使得普通文本和网页文本通过一种简单的格式关联了起来，文本编辑者不在需要了解复杂的HTML标签。同时，你也可以在Markdown格式的文本中使用HTML标签，这样可以补全一些Markdown语法不具备的功能，比如文字的显示颜色。<br>本文中不会对Markdown语法转换原理和转换后的HTML标签进行说明，只会列举Markdown的格式显示效果。<br><a id="more"></a></p>
<h2 id="我为什么要用Markdown">我为什么要用Markdown</h2><p>因为我搭建的博客支持使用Markdown来构建博文，并且Markdown作为一种标记语言学习简单，而且作为程序员，使用标记语言来写作会更加符合那种高逼格与众不同的形象~</p>
<h2 id="标题">标题</h2><p>Markdown中的标题使用<code>#</code>进行标识， Markdown支持六级标题，标题1可以作为文本题目的显示，标题2后会跟一个下划线（HEXO搭建的博客支持Markdown语法写的文本，并且会根据标题格式生成博文目录，不过只会支持从标题2开始的标题）。</p>
<pre><code><span class="preprocessor"># 标题1</span>
<span class="preprocessor">## 标题2</span>
<span class="preprocessor">### 标题3</span>
<span class="preprocessor">#### 标题4</span>
<span class="preprocessor">##### 标题5</span>
<span class="preprocessor">###### 标题6</span>
</code></pre><p>以上文本的显示效果为</p>
<p><img src="http://7xk7ce.com1.z0.glb.clouddn.com/head.png" alt=""></p>
<h2 id="文字格式">文字格式</h2><ul>
<li><p>斜体。<code>*斜体*</code> 显示为 <em>斜体</em></p>
</li>
<li><p>粗体。<code>**粗体**</code> 显示为 <strong>粗体</strong></p>
</li>
</ul>
<h2 id="文本块">文本块</h2><h3 id="引用文本块">引用文本块</h3><p>强调引用的文本格式是一个文本块，使用>开头的文本会被显示为文本块</p>
<pre><code>&gt;这是一个
&gt;引用的文本
</code></pre><p>会被显示为</p>
<blockquote>
<p>这是一个<br>引用的文本</p>
</blockquote>
<h3 id="代码块">代码块</h3><p>代码块有三种</p>
<ul>
<li><p>一种是插入到文本中的<code>这是一小节代码</code>，使用的格式为</p>
<pre><code><span class="escape">`这</span>是一小节代码`
</code></pre></li>
<li><p>一种是一整段的代码，这个整段代码的格式和特殊字符都会保留而不会被转换。每一行的文本前面增加缩进可以实现代码块的显示，可以缩进一个，也可以缩进两个。</p>
<pre><code><span class="variable">&lt;Tab缩进&gt;</span>public CmdLineDiskMetrics(AbstractUnixCollector execWrapper, LogService <span class="keyword">log</span>Service,
<span class="variable">&lt;Tab缩进&gt;</span>                          UnixAgentPropertyWrapper properties) {
<span class="variable">&lt;Tab缩进&gt;</span>mExecWrapper = execWrapper;
<span class="variable">&lt;Tab缩进&gt;</span>mLogger = <span class="keyword">log</span>Service.getLogger(CmdLineDiskMetrics.class);
<span class="variable">&lt;Tab缩进&gt;</span>mStringUtils = new StringUtils(<span class="keyword">log</span>Service, CmdLineDiskMetrics.class.getName());
<span class="variable">&lt;Tab缩进&gt;</span>mProperties = properties;
<span class="variable">&lt;Tab缩进&gt;</span>mIsDebugEnable = mLogger.getDebugLevel() &gt;= <span class="number">1</span>;
<span class="variable">&lt;Tab缩进&gt;</span>
<span class="variable">&lt;Tab缩进&gt;</span>mHostResolver = new HostNameResolver(<span class="keyword">log</span>Service, execWrapper.getServices().getResolverService());
<span class="variable">&lt;Tab缩进&gt;</span>}
</code></pre><p>会被显示成</p>
<pre><code>public <span class="type">CmdLineDiskMetrics</span>(<span class="type">AbstractUnixCollector</span> execWrapper, <span class="type">LogService</span> logService,
                      <span class="type">UnixAgentPropertyWrapper</span> properties) {
mExecWrapper = execWrapper;
mLogger = logService.getLogger(<span class="type">CmdLineDiskMetrics</span>.<span class="keyword">class</span>);
mStringUtils = <span class="keyword">new</span> <span class="type">StringUtils</span>(logService, <span class="type">CmdLineDiskMetrics</span>.<span class="keyword">class</span>.getName<span class="literal">()</span>);
mProperties = properties;
mIsDebugEnable = mLogger.getDebugLevel<span class="literal">()</span> &gt;= <span class="number">1</span>;

mHostResolver = <span class="keyword">new</span> <span class="type">HostNameResolver</span>(logService, execWrapper.getServices<span class="literal">()</span>.getResolverService<span class="literal">()</span>);
}
</code></pre></li>
<li><p>命令行格式的代码需要使用bash格式来显示，这样的格式会在每一条命令前面加上序号</p>
<p>  ````bash<br>  $ commond1<br>  $ commond2<br>  ````<br>会显示成</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ commond1</span><br><span class="line">$ commond2</span><br></pre></td></tr></table></figure>
<h2 id="表格">表格</h2><p>Markdown中使用形象的格式来表示表格（表格和上一个文本之间需要有一个空行分隔）</p>
<pre><code>|<span class="string">标题1</span>|<span class="string">标题2</span>|
|<span class="string">-----</span>|<span class="string">-----</span>|<span class="string">    #这一行是用来定义表格的对齐方式的        
</span>|<span class="string">第一格</span>|<span class="string">第二格</span>|
|<span class="string">第三格</span>|<span class="string">第四格</span>|
</code></pre><p>会显示一个如下的表格</p>
<table>
<thead>
<tr>
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一格</td>
<td>第二格</td>
</tr>
<tr>
<td>第三格</td>
<td>第四格</td>
</tr>
</tbody>
</table>
<p>表格的对齐方式是通过表格标题下方的第二行|——|——-|来定义的</p>
<ul>
<li><code>----</code>表示左对齐</li>
<li><code>-----：</code>表示右对齐</li>
<li><code>：----：</code>表示居中对齐</li>
</ul>
<h2 id="超链接">超链接</h2><p>定义一个超链接使用一下格式</p>
<pre><code>[<span class="link_label">Yuan</span>](<span class="link_url">http://luoyuan800.github.io "Yuan-Blog"</span>)
</code></pre><p>[]内的是要显示的文本，而()的前半部分是连接的地址，后半部分则是鼠标移动到链接上面要显示的内容。<br>最后的显示结果为 <a href="http://luoyuan800.github.io" title="Yuan-Blog">Yuan</a></p>
<h2 id="图片">图片</h2><p>图片的格式和超链接是一样的，不同的地方是，在[]要留空，之后的()中只需要填入图片的网址即可</p>
<pre><code>!<span class="attr_selector">[]</span>(<span class="attribute">http</span>:<span class="comment">//7xk7ce.com1.z0.glb.clouddn.com/head.png)</span>
</code></pre><h2 id="特殊字符">特殊字符</h2><p>如果要正常显示特殊字符，需要在其前面使用<code>\</code>标识，这样的话特殊字符就不会被转换。特殊字符包括：</p>
<pre><code><span class="change">!</span>
`
&gt;
\
&lt;
[
]
(
)
*
<span class="addition">+</span>
<span class="deletion">-</span>
_
.
</code></pre><p>如果是要同时显示括号的话只需要在后一个括号前面加上<code>\</code> 如：</p>
<pre><code>(<span class="string">\)</span>  [<span class="string">\]</span> &lt;<span class="string">\&gt;</span> 
</code></pre><p>会显示成<br>() [] &lt;></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown是一种标记语言，主要用于网页上文本格式设置。它的使得我们可以使用普通的文本编辑器编辑网页文本。在页面显示用Markdown语法的文本，需要先转换为HTML格式再进行显示。Markdown使得普通文本和网页文本通过一种简单的格式关联了起来，文本编辑者不在需要了解复杂的HTML标签。同时，你也可以在Markdown格式的文本中使用HTML标签，这样可以补全一些Markdown语法不具备的功能，比如文字的显示颜色。<br>本文中不会对Markdown语法转换原理和转换后的HTML标签进行说明，只会列举Markdown的格式显示效果。<br>]]>
    
    </summary>
    
      <category term="网站-语言" scheme="http://luoyuan800.github.io/categories/%E7%BD%91%E7%AB%99-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>